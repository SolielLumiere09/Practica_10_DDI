
Practica10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800200  0000246a  000024fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000246a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ec  0080028e  0080028e  0000258c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c8  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e4a5  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002863  00000000  00000000  00011095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000333b  00000000  00000000  000138f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001354  00000000  00000000  00016c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002aa0  00000000  00000000  00017f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000072f0  00000000  00000000  0001aa28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  00021d18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1b c1       	rjmp	.+566    	; 0x238 <__dtors_end>
       2:	00 00       	nop
       4:	49 c1       	rjmp	.+658    	; 0x298 <__bad_interrupt>
       6:	00 00       	nop
       8:	47 c1       	rjmp	.+654    	; 0x298 <__bad_interrupt>
       a:	00 00       	nop
       c:	45 c1       	rjmp	.+650    	; 0x298 <__bad_interrupt>
       e:	00 00       	nop
      10:	43 c1       	rjmp	.+646    	; 0x298 <__bad_interrupt>
      12:	00 00       	nop
      14:	41 c1       	rjmp	.+642    	; 0x298 <__bad_interrupt>
      16:	00 00       	nop
      18:	3f c1       	rjmp	.+638    	; 0x298 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3d c1       	rjmp	.+634    	; 0x298 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3b c1       	rjmp	.+630    	; 0x298 <__bad_interrupt>
      22:	00 00       	nop
      24:	39 c1       	rjmp	.+626    	; 0x298 <__bad_interrupt>
      26:	00 00       	nop
      28:	37 c1       	rjmp	.+622    	; 0x298 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	35 c1       	rjmp	.+618    	; 0x298 <__bad_interrupt>
      2e:	00 00       	nop
      30:	33 c1       	rjmp	.+614    	; 0x298 <__bad_interrupt>
      32:	00 00       	nop
      34:	31 c1       	rjmp	.+610    	; 0x298 <__bad_interrupt>
      36:	00 00       	nop
      38:	2f c1       	rjmp	.+606    	; 0x298 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2d c1       	rjmp	.+602    	; 0x298 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2b c1       	rjmp	.+598    	; 0x298 <__bad_interrupt>
      42:	00 00       	nop
      44:	29 c1       	rjmp	.+594    	; 0x298 <__bad_interrupt>
      46:	00 00       	nop
      48:	27 c1       	rjmp	.+590    	; 0x298 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	25 c1       	rjmp	.+586    	; 0x298 <__bad_interrupt>
      4e:	00 00       	nop
      50:	cf c2       	rjmp	.+1438   	; 0x5f0 <__vector_20>
      52:	00 00       	nop
      54:	21 c1       	rjmp	.+578    	; 0x298 <__bad_interrupt>
      56:	00 00       	nop
      58:	1f c1       	rjmp	.+574    	; 0x298 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c7       	rjmp	.+3710   	; 0xedc <__vector_23>
      5e:	00 00       	nop
      60:	1b c1       	rjmp	.+566    	; 0x298 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c6       	rjmp	.+3218   	; 0xcf8 <__vector_25>
      66:	00 00       	nop
      68:	7d c6       	rjmp	.+3322   	; 0xd64 <__vector_26>
      6a:	00 00       	nop
      6c:	15 c1       	rjmp	.+554    	; 0x298 <__bad_interrupt>
      6e:	00 00       	nop
      70:	13 c1       	rjmp	.+550    	; 0x298 <__bad_interrupt>
      72:	00 00       	nop
      74:	11 c1       	rjmp	.+546    	; 0x298 <__bad_interrupt>
      76:	00 00       	nop
      78:	0f c1       	rjmp	.+542    	; 0x298 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0d c1       	rjmp	.+538    	; 0x298 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0b c1       	rjmp	.+534    	; 0x298 <__bad_interrupt>
      82:	00 00       	nop
      84:	09 c1       	rjmp	.+530    	; 0x298 <__bad_interrupt>
      86:	00 00       	nop
      88:	07 c1       	rjmp	.+526    	; 0x298 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 c1       	rjmp	.+522    	; 0x298 <__bad_interrupt>
      8e:	00 00       	nop
      90:	03 c1       	rjmp	.+518    	; 0x298 <__bad_interrupt>
      92:	00 00       	nop
      94:	01 c1       	rjmp	.+514    	; 0x298 <__bad_interrupt>
      96:	00 00       	nop
      98:	ff c0       	rjmp	.+510    	; 0x298 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fd c0       	rjmp	.+506    	; 0x298 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	fb c0       	rjmp	.+502    	; 0x298 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f9 c0       	rjmp	.+498    	; 0x298 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f7 c0       	rjmp	.+494    	; 0x298 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f5 c0       	rjmp	.+490    	; 0x298 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f3 c0       	rjmp	.+486    	; 0x298 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f1 c0       	rjmp	.+482    	; 0x298 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ef c0       	rjmp	.+478    	; 0x298 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ed c0       	rjmp	.+474    	; 0x298 <__bad_interrupt>
      be:	00 00       	nop
      c0:	eb c0       	rjmp	.+470    	; 0x298 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e9 c0       	rjmp	.+466    	; 0x298 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e7 c0       	rjmp	.+462    	; 0x298 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e5 c0       	rjmp	.+458    	; 0x298 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e3 c0       	rjmp	.+454    	; 0x298 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e1 c0       	rjmp	.+450    	; 0x298 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	df c0       	rjmp	.+446    	; 0x298 <__bad_interrupt>
      da:	00 00       	nop
      dc:	dd c0       	rjmp	.+442    	; 0x298 <__bad_interrupt>
      de:	00 00       	nop
      e0:	db c0       	rjmp	.+438    	; 0x298 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	65 08       	sbc	r6, r5
      e6:	6a 08       	sbc	r6, r10
      e8:	6f 08       	sbc	r6, r15
      ea:	79 08       	sbc	r7, r9
      ec:	83 08       	sbc	r8, r3
      ee:	fc 08       	sbc	r15, r12
      f0:	8d 08       	sbc	r8, r13
      f2:	95 08       	sbc	r9, r5
      f4:	9d 08       	sbc	r9, r13
      f6:	a7 08       	sbc	r10, r7
      f8:	b1 08       	sbc	r11, r1
      fa:	bb 08       	sbc	r11, r11
      fc:	ca 08       	sbc	r12, r10
      fe:	d4 08       	sbc	r13, r4
     100:	fc 08       	sbc	r15, r12
     102:	de 08       	sbc	r13, r14
     104:	e8 08       	sbc	r14, r8
     106:	f2 08       	sbc	r15, r2
     108:	1f 09       	sbc	r17, r15
     10a:	22 09       	sbc	r18, r2
     10c:	11 09       	sbc	r17, r1
     10e:	15 09       	sbc	r17, r5
     110:	1b 09       	sbc	r17, r11
     112:	59 09       	sbc	r21, r9
     114:	26 09       	sbc	r18, r6
     116:	2a 09       	sbc	r18, r10
     118:	30 09       	sbc	r19, r0
     11a:	34 09       	sbc	r19, r4
     11c:	38 09       	sbc	r19, r8
     11e:	3e 09       	sbc	r19, r14
     120:	42 09       	sbc	r20, r2
     122:	46 09       	sbc	r20, r6
     124:	59 09       	sbc	r21, r9
     126:	4c 09       	sbc	r20, r12
     128:	50 09       	sbc	r21, r0
     12a:	54 09       	sbc	r21, r4

0000012c <__trampolines_end>:
     12c:	00 00       	nop
     12e:	0a 0b       	sbc	r16, r26
     130:	02 09       	sbc	r16, r2
     132:	0c 0d       	add	r16, r12
     134:	0e 08       	sbc	r0, r14
     136:	07 03       	mulsu	r16, r23
     138:	04 01       	movw	r0, r8
	...
     156:	00 00       	nop
     158:	12 11       	cpse	r17, r2
     15a:	10 00       	.word	0x0010	; ????
	...

00000172 <digital_pin_to_bit_mask_PGM>:
     172:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     182:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     192:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a2:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b2:	04 08 10 20 40 80                                   ... @.

000001b8 <digital_pin_to_port_PGM>:
     1b8:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1c8:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1d8:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1e8:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1f8:	0b 0b 0b 0b 0b 0b                                   ......

000001fe <port_to_output_PGM>:
     1fe:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     20e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000218 <port_to_mode_PGM>:
     218:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     228:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000232 <__ctors_start>:
     232:	84 02       	muls	r24, r20
     234:	e4 06       	cpc	r14, r20

00000236 <__ctors_end>:
     236:	89 02       	muls	r24, r25

00000238 <__dtors_end>:
     238:	11 24       	eor	r1, r1
     23a:	1f be       	out	0x3f, r1	; 63
     23c:	cf ef       	ldi	r28, 0xFF	; 255
     23e:	d1 e2       	ldi	r29, 0x21	; 33
     240:	de bf       	out	0x3e, r29	; 62
     242:	cd bf       	out	0x3d, r28	; 61
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0c bf       	out	0x3c, r16	; 60

00000248 <__do_copy_data>:
     248:	12 e0       	ldi	r17, 0x02	; 2
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b2 e0       	ldi	r27, 0x02	; 2
     24e:	ea e6       	ldi	r30, 0x6A	; 106
     250:	f4 e2       	ldi	r31, 0x24	; 36
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	ae 38       	cpi	r26, 0x8E	; 142
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>

00000262 <__do_clear_bss>:
     262:	23 e0       	ldi	r18, 0x03	; 3
     264:	ae e8       	ldi	r26, 0x8E	; 142
     266:	b2 e0       	ldi	r27, 0x02	; 2
     268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
     26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
     26c:	aa 37       	cpi	r26, 0x7A	; 122
     26e:	b2 07       	cpc	r27, r18
     270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>

00000272 <__do_global_ctors>:
     272:	11 e0       	ldi	r17, 0x01	; 1
     274:	cb e1       	ldi	r28, 0x1B	; 27
     276:	d1 e0       	ldi	r29, 0x01	; 1
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	06 c0       	rjmp	.+12     	; 0x288 <__do_global_ctors+0x16>
     27c:	21 97       	sbiw	r28, 0x01	; 1
     27e:	01 09       	sbc	r16, r1
     280:	80 2f       	mov	r24, r16
     282:	fe 01       	movw	r30, r28
     284:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__tablejump2__>
     288:	c9 31       	cpi	r28, 0x19	; 25
     28a:	d1 07       	cpc	r29, r17
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	08 07       	cpc	r16, r24
     290:	a9 f7       	brne	.-22     	; 0x27c <__do_global_ctors+0xa>
     292:	c8 d5       	rcall	.+2960   	; 0xe24 <main>
     294:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__do_global_dtors>

00000298 <__bad_interrupt>:
     298:	b3 ce       	rjmp	.-666    	; 0x0 <__vectors>

0000029a <_Z14ISR_updateTimev>:
	}
	
  _delay_ms(10);
}
void ISR_updateTime(){
	temp_refresh++;
     29a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <temp_refresh>
     29e:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <temp_refresh+0x1>
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <temp_refresh+0x1>
     2a8:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <temp_refresh>
	lum_refresh++;
     2ac:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end>
     2b0:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__data_end+0x1>
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <__data_end+0x1>
     2ba:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__data_end>
     2be:	08 95       	ret

000002c0 <setup>:
int getTemperature();
void proccesString();
void ISR_updateTime();


void setup() {
     2c0:	cf 93       	push	r28
        "out __SREG__, __tmp_reg__"
        : /* no outputs */
        : "d" (__tmp),
          "M" (_SFR_MEM_ADDR(CLKPR)),
          "d" (__x)
        : "r0");
     2c2:	c3 e0       	ldi	r28, 0x03	; 3
     2c4:	80 e8       	ldi	r24, 0x80	; 128
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     2ce:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     2d2:	0f be       	out	0x3f, r0	; 63
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     2d4:	26 e0       	ldi	r18, 0x06	; 6
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	5c e2       	ldi	r21, 0x2C	; 44
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	80 ed       	ldi	r24, 0xD0	; 208
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	a7 d4       	rcall	.+2382   	; 0xc32 <_ZN14HardwareSerial5beginEmh>
  clock_prescale_set (clock_div_8);

  Serial.begin(76800);

  DDRA = 0xFF;
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	81 b9       	out	0x01, r24	; 1
  PORTA = 0x00;
     2e8:	12 b8       	out	0x02, r1	; 2
  
  msgReceived.reserve(120);
     2ea:	68 e7       	ldi	r22, 0x78	; 120
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	83 e9       	ldi	r24, 0x93	; 147
     2f0:	92 e0       	ldi	r25, 0x02	; 2
     2f2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_ZN6String7reserveEj>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
     2f6:	e1 e8       	ldi	r30, 0x81	; 129
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 e1       	ldi	r24, 0x10	; 16
     2fc:	80 83       	st	Z, r24
	TCCR1A = 0;                 // clear control register A 
     2fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	if (cycles < TIMER1_RESOLUTION * 8) {
		clockSelectBits = _BV(CS11);
		pwmPeriod = cycles / 8;
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
		clockSelectBits = _BV(CS11) | _BV(CS10);
     302:	c0 93 cd 02 	sts	0x02CD, r28	; 0x8002cd <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 64;
     306:	89 e0       	ldi	r24, 0x09	; 9
     308:	9d e3       	ldi	r25, 0x3D	; 61
     30a:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <_ZN8TimerOne9pwmPeriodE+0x1>
     30e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <_ZN8TimerOne9pwmPeriodE>
		pwmPeriod = cycles / 1024;
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
		pwmPeriod = TIMER1_RESOLUTION - 1;
	}
	ICR1 = pwmPeriod;
     312:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     316:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	TCCR1B = _BV(WGM13) | clockSelectBits;
     31a:	83 e1       	ldi	r24, 0x13	; 19
     31c:	80 83       	st	Z, r24

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
     31e:	8d e4       	ldi	r24, 0x4D	; 77
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <_ZN8TimerOne11isrCallbackE+0x1>
     326:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <_ZN8TimerOne11isrCallbackE>
	TIMSK1 = _BV(TOIE1);
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
  
  Timer1.initialize(500000);
  Timer1.attachInterrupt(ISR_updateTime);
  
  DDRB |= 1 << PB7;
     330:	27 9a       	sbi	0x04, 7	; 4
  
  Serial.println("Ready");
     332:	67 e0       	ldi	r22, 0x07	; 7
     334:	72 e0       	ldi	r23, 0x02	; 2
     336:	80 ed       	ldi	r24, 0xD0	; 208
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	cf 91       	pop	r28
     33c:	bf c5       	rjmp	.+2942   	; 0xebc <_ZN5Print7printlnEPKc>

0000033e <_Z14getTemperaturev>:
	temp_refresh++;
	lum_refresh++;
}
int getTemperature()
{
	float lecture = (float)analogRead(ADC1);
     33e:	87 e3       	ldi	r24, 0x37	; 55
     340:	79 d6       	rcall	.+3314   	; 0x1034 <analogRead>
	float voltaje = (float)(lecture * 5.f / 1023.f);
	float temperature = (float)(voltaje - 0.40f) / 0.02f;
	
	
	return temperature;
     342:	bc 01       	movw	r22, r24
     344:	99 0f       	add	r25, r25
     346:	88 0b       	sbc	r24, r24
     348:	99 0b       	sbc	r25, r25
     34a:	7d d2       	rcall	.+1274   	; 0x846 <__floatsisf>
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	40 ea       	ldi	r20, 0xA0	; 160
     352:	50 e4       	ldi	r21, 0x40	; 64
     354:	04 d3       	rcall	.+1544   	; 0x95e <__mulsf3>
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 ec       	ldi	r19, 0xC0	; 192
     35a:	4f e7       	ldi	r20, 0x7F	; 127
     35c:	54 e4       	ldi	r21, 0x44	; 68
     35e:	d8 d1       	rcall	.+944    	; 0x710 <__divsf3>
     360:	2d ec       	ldi	r18, 0xCD	; 205
     362:	3c ec       	ldi	r19, 0xCC	; 204
     364:	4c ec       	ldi	r20, 0xCC	; 204
     366:	5e e3       	ldi	r21, 0x3E	; 62
     368:	6e d1       	rcall	.+732    	; 0x646 <__subsf3>
     36a:	2a e0       	ldi	r18, 0x0A	; 10
     36c:	37 ed       	ldi	r19, 0xD7	; 215
     36e:	43 ea       	ldi	r20, 0xA3	; 163
     370:	5c e3       	ldi	r21, 0x3C	; 60
     372:	ce d1       	rcall	.+924    	; 0x710 <__divsf3>
     374:	35 d2       	rcall	.+1130   	; 0x7e0 <__fixsfsi>
}
     376:	cb 01       	movw	r24, r22
     378:	08 95       	ret

0000037a <_Z13proccesStringv>:
void proccesString()
{
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	2c 97       	sbiw	r28, 0x0c	; 12
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
	msgReceived.trim();
     390:	83 e9       	ldi	r24, 0x93	; 147
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	0e 94 23 0c 	call	0x1846	; 0x1846 <_ZN6String4trimEv>
	
	if(msgReceived.equals("ROOM_LIGHT")){
     398:	6d e0       	ldi	r22, 0x0D	; 13
     39a:	72 e0       	ldi	r23, 0x02	; 2
     39c:	83 e9       	ldi	r24, 0x93	; 147
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZNK6String6equalsEPKc>
     3a4:	88 23       	and	r24, r24
     3a6:	21 f0       	breq	.+8      	; 0x3b0 <_Z13proccesStringv+0x36>
		PORTA ^= 1 << PA0;
     3a8:	92 b1       	in	r25, 0x02	; 2
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	89 27       	eor	r24, r25
     3ae:	82 b9       	out	0x02, r24	; 2
	}
	
	if(msgReceived.equals("LED_RED")){
     3b0:	68 e1       	ldi	r22, 0x18	; 24
     3b2:	72 e0       	ldi	r23, 0x02	; 2
     3b4:	83 e9       	ldi	r24, 0x93	; 147
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZNK6String6equalsEPKc>
     3bc:	88 23       	and	r24, r24
     3be:	21 f0       	breq	.+8      	; 0x3c8 <_Z13proccesStringv+0x4e>
		PORTA ^= 1 << PA1;
     3c0:	92 b1       	in	r25, 0x02	; 2
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	89 27       	eor	r24, r25
     3c6:	82 b9       	out	0x02, r24	; 2
	}
	if(msgReceived.equals("LED_WHITE")){
     3c8:	60 e2       	ldi	r22, 0x20	; 32
     3ca:	72 e0       	ldi	r23, 0x02	; 2
     3cc:	83 e9       	ldi	r24, 0x93	; 147
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZNK6String6equalsEPKc>
     3d4:	88 23       	and	r24, r24
     3d6:	21 f0       	breq	.+8      	; 0x3e0 <_Z13proccesStringv+0x66>
		PORTA ^= 1 << PA2;
     3d8:	92 b1       	in	r25, 0x02	; 2
     3da:	84 e0       	ldi	r24, 0x04	; 4
     3dc:	89 27       	eor	r24, r25
     3de:	82 b9       	out	0x02, r24	; 2
	}
	if(msgReceived.equals("LED_GREEN")){
     3e0:	6a e2       	ldi	r22, 0x2A	; 42
     3e2:	72 e0       	ldi	r23, 0x02	; 2
     3e4:	83 e9       	ldi	r24, 0x93	; 147
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZNK6String6equalsEPKc>
     3ec:	88 23       	and	r24, r24
     3ee:	21 f0       	breq	.+8      	; 0x3f8 <_Z13proccesStringv+0x7e>
		PORTA ^= 1 << PA3;
     3f0:	92 b1       	in	r25, 0x02	; 2
     3f2:	88 e0       	ldi	r24, 0x08	; 8
     3f4:	89 27       	eor	r24, r25
     3f6:	82 b9       	out	0x02, r24	; 2
	}

	if(msgReceived.startsWith("MOTOR_SPEED")){
     3f8:	64 e3       	ldi	r22, 0x34	; 52
     3fa:	72 e0       	ldi	r23, 0x02	; 2
     3fc:	ce 01       	movw	r24, r28
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN6StringC1EPKc>
     404:	be 01       	movw	r22, r28
     406:	6f 5f       	subi	r22, 0xFF	; 255
     408:	7f 4f       	sbci	r23, 0xFF	; 255
     40a:	83 e9       	ldi	r24, 0x93	; 147
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <_ZNK6String10startsWithERKS_>
     412:	18 2f       	mov	r17, r24
     414:	ce 01       	movw	r24, r28
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	b7 d7       	rcall	.+3950   	; 0x1388 <_ZN6StringD1Ev>
     41a:	11 23       	and	r17, r17
     41c:	31 f1       	breq	.+76     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		
		msgReceived.replace("MOTOR_SPEED", "");
     41e:	61 e8       	ldi	r22, 0x81	; 129
     420:	72 e0       	ldi	r23, 0x02	; 2
     422:	ce 01       	movw	r24, r28
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN6StringC1EPKc>
     42a:	64 e3       	ldi	r22, 0x34	; 52
     42c:	72 e0       	ldi	r23, 0x02	; 2
     42e:	ce 01       	movw	r24, r28
     430:	07 96       	adiw	r24, 0x07	; 7
     432:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN6StringC1EPKc>
     436:	ae 01       	movw	r20, r28
     438:	4f 5f       	subi	r20, 0xFF	; 255
     43a:	5f 4f       	sbci	r21, 0xFF	; 255
     43c:	be 01       	movw	r22, r28
     43e:	69 5f       	subi	r22, 0xF9	; 249
     440:	7f 4f       	sbci	r23, 0xFF	; 255
     442:	83 e9       	ldi	r24, 0x93	; 147
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN6String7replaceERKS_S1_>
     44a:	ce 01       	movw	r24, r28
     44c:	07 96       	adiw	r24, 0x07	; 7
     44e:	9c d7       	rcall	.+3896   	; 0x1388 <_ZN6StringD1Ev>
     450:	ce 01       	movw	r24, r28
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	99 d7       	rcall	.+3890   	; 0x1388 <_ZN6StringD1Ev>
		msgReceived.trim();
     456:	83 e9       	ldi	r24, 0x93	; 147
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	0e 94 23 0c 	call	0x1846	; 0x1846 <_ZN6String4trimEv>
		
		int dutyCicle = msgReceived.toInt();
     45e:	83 e9       	ldi	r24, 0x93	; 147
     460:	92 e0       	ldi	r25, 0x02	; 2
     462:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <_ZNK6String5toIntEv>
		analogWrite(PWM, dutyCicle);
     466:	8d e0       	ldi	r24, 0x0D	; 13
     468:	0a d6       	rcall	.+3092   	; 0x107e <analogWrite>
	}
	
	msgReceived = "";
     46a:	61 e8       	ldi	r22, 0x81	; 129
     46c:	72 e0       	ldi	r23, 0x02	; 2
     46e:	83 e9       	ldi	r24, 0x93	; 147
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	0e 94 42 0a 	call	0x1484	; 0x1484 <_ZN6StringaSEPKc>
	receiveComplete = false;
     476:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <receiveComplete>
	
	
}
     47a:	2c 96       	adiw	r28, 0x0c	; 12
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	08 95       	ret

0000048e <_Z14getLuminisensev>:
int getLuminisense()
{
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
	int lecture = (analogRead(ADC0));
     496:	86 e3       	ldi	r24, 0x36	; 54
     498:	cd d5       	rcall	.+2970   	; 0x1034 <analogRead>
	float voltaje = (float)(lecture * 5.f / 1023.f); 
	int luminiscense = (voltaje * 15 * 5);
	luminiscense = luminiscense - (luminiscense * 0.10) + 1;
     49a:	bc 01       	movw	r22, r24
     49c:	99 0f       	add	r25, r25
     49e:	88 0b       	sbc	r24, r24
     4a0:	99 0b       	sbc	r25, r25
     4a2:	d1 d1       	rcall	.+930    	; 0x846 <__floatsisf>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 ea       	ldi	r20, 0xA0	; 160
     4aa:	50 e4       	ldi	r21, 0x40	; 64
     4ac:	58 d2       	rcall	.+1200   	; 0x95e <__mulsf3>
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 ec       	ldi	r19, 0xC0	; 192
     4b2:	4f e7       	ldi	r20, 0x7F	; 127
     4b4:	54 e4       	ldi	r21, 0x44	; 68
     4b6:	2c d1       	rcall	.+600    	; 0x710 <__divsf3>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e7       	ldi	r20, 0x70	; 112
     4be:	51 e4       	ldi	r21, 0x41	; 65
     4c0:	4e d2       	rcall	.+1180   	; 0x95e <__mulsf3>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 ea       	ldi	r20, 0xA0	; 160
     4c8:	50 e4       	ldi	r21, 0x40	; 64
     4ca:	49 d2       	rcall	.+1170   	; 0x95e <__mulsf3>
     4cc:	89 d1       	rcall	.+786    	; 0x7e0 <__fixsfsi>
     4ce:	07 2e       	mov	r0, r23
     4d0:	00 0c       	add	r0, r0
     4d2:	88 0b       	sbc	r24, r24
     4d4:	99 0b       	sbc	r25, r25
     4d6:	b7 d1       	rcall	.+878    	; 0x846 <__floatsisf>
     4d8:	6b 01       	movw	r12, r22
     4da:	7c 01       	movw	r14, r24
	
	return luminiscense;
     4dc:	2d ec       	ldi	r18, 0xCD	; 205
     4de:	3c ec       	ldi	r19, 0xCC	; 204
     4e0:	4c ec       	ldi	r20, 0xCC	; 204
     4e2:	5d e3       	ldi	r21, 0x3D	; 61
     4e4:	3c d2       	rcall	.+1144   	; 0x95e <__mulsf3>
     4e6:	9b 01       	movw	r18, r22
     4e8:	ac 01       	movw	r20, r24
     4ea:	c7 01       	movw	r24, r14
     4ec:	b6 01       	movw	r22, r12
     4ee:	ab d0       	rcall	.+342    	; 0x646 <__subsf3>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e8       	ldi	r20, 0x80	; 128
     4f6:	5f e3       	ldi	r21, 0x3F	; 63
     4f8:	a7 d0       	rcall	.+334    	; 0x648 <__addsf3>
     4fa:	72 d1       	rcall	.+740    	; 0x7e0 <__fixsfsi>
     4fc:	cb 01       	movw	r24, r22
	
}
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	df 90       	pop	r13
     504:	cf 90       	pop	r12
     506:	08 95       	ret

00000508 <_GLOBAL__sub_I_buffer>:
     508:	61 e8       	ldi	r22, 0x81	; 129
#define ADC1 55
#define PWM 13


char buffer[50];
String msgReceived;
     50a:	72 e0       	ldi	r23, 0x02	; 2
     50c:	83 e9       	ldi	r24, 0x93	; 147
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	a5 c7       	rjmp	.+3914   	; 0x145c <_ZN6StringC1EPKc>

00000512 <_GLOBAL__sub_D_buffer>:
     512:	83 e9       	ldi	r24, 0x93	; 147
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	38 c7       	rjmp	.+3696   	; 0x1388 <_ZN6StringD1Ev>

00000518 <loop>:
  
}

void loop() {
    
	if(receiveComplete){
     518:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <receiveComplete>
     51c:	81 11       	cpse	r24, r1
		proccesString();
     51e:	2d df       	rcall	.-422    	; 0x37a <_Z13proccesStringv>
	}
	
	
	if(lum_refresh > 2){
     520:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end>
     524:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__data_end+0x1>
     528:	03 97       	sbiw	r24, 0x03	; 3
     52a:	0c f1       	brlt	.+66     	; 0x56e <loop+0x56>
		
		if(Serial.availableForWrite()){
     52c:	80 ed       	ldi	r24, 0xD0	; 208
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	a7 d2       	rcall	.+1358   	; 0xa80 <_ZN14HardwareSerial17availableForWriteEv>
     532:	89 2b       	or	r24, r25
			sprintf(buffer, "Luminocidad = %d Lx", getLuminisense());
     534:	c1 f0       	breq	.+48     	; 0x566 <loop+0x4e>
     536:	ab df       	rcall	.-170    	; 0x48e <_Z14getLuminisensev>
     538:	9f 93       	push	r25
     53a:	8f 93       	push	r24
     53c:	80 e4       	ldi	r24, 0x40	; 64
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	89 e9       	ldi	r24, 0x99	; 153
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <sprintf>
			
			Serial.println(buffer);
     550:	69 e9       	ldi	r22, 0x99	; 153
     552:	72 e0       	ldi	r23, 0x02	; 2
     554:	80 ed       	ldi	r24, 0xD0	; 208
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	b1 d4       	rcall	.+2402   	; 0xebc <_ZN5Print7printlnEPKc>
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
		}
		lum_refresh = 0;
     566:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <__data_end+0x1>
     56a:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <__data_end>
	}
	
	if(temp_refresh > 3){
     56e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <temp_refresh>
     572:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <temp_refresh+0x1>
     576:	04 97       	sbiw	r24, 0x04	; 4
		if(Serial.availableForWrite()){
     578:	0c f1       	brlt	.+66     	; 0x5bc <loop+0xa4>
     57a:	80 ed       	ldi	r24, 0xD0	; 208
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	80 d2       	rcall	.+1280   	; 0xa80 <_ZN14HardwareSerial17availableForWriteEv>
     580:	89 2b       	or	r24, r25
			sprintf(buffer, "Temperatura = %d Celsius", getTemperature());
     582:	c1 f0       	breq	.+48     	; 0x5b4 <loop+0x9c>
     584:	dc de       	rcall	.-584    	; 0x33e <_Z14getTemperaturev>
     586:	9f 93       	push	r25
     588:	8f 93       	push	r24
     58a:	84 e5       	ldi	r24, 0x54	; 84
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	89 e9       	ldi	r24, 0x99	; 153
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	9f 93       	push	r25
     598:	8f 93       	push	r24
     59a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <sprintf>
			Serial.println(buffer);
     59e:	69 e9       	ldi	r22, 0x99	; 153
     5a0:	72 e0       	ldi	r23, 0x02	; 2
     5a2:	80 ed       	ldi	r24, 0xD0	; 208
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	8a d4       	rcall	.+2324   	; 0xebc <_ZN5Print7printlnEPKc>
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
		}
		
		temp_refresh = 0;
     5b4:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <temp_refresh+0x1>
     5b8:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <temp_refresh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5bc:	8f e0       	ldi	r24, 0x0F	; 15
     5be:	97 e2       	ldi	r25, 0x27	; 39
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <loop+0xa8>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <loop+0xae>
     5c6:	00 00       	nop
     5c8:	08 95       	ret

000005ca <_Z11serialEventv>:
	return luminiscense;
	
}
void serialEvent()
{
	if(Serial.available()){
     5ca:	80 ed       	ldi	r24, 0xD0	; 208
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	2a d2       	rcall	.+1108   	; 0xa24 <_ZN14HardwareSerial9availableEv>
     5d0:	89 2b       	or	r24, r25
     5d2:	69 f0       	breq	.+26     	; 0x5ee <_Z11serialEventv+0x24>
		char c = (char)Serial.read();
     5d4:	80 ed       	ldi	r24, 0xD0	; 208
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	3f d2       	rcall	.+1150   	; 0xa58 <_ZN14HardwareSerial4readEv>
		
		if(c == '\n'){
     5da:	8a 30       	cpi	r24, 0x0A	; 10
     5dc:	21 f4       	brne	.+8      	; 0x5e6 <_Z11serialEventv+0x1c>
			
			receiveComplete = true;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <receiveComplete>
     5e4:	08 95       	ret

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     5e6:	68 2f       	mov	r22, r24
     5e8:	83 e9       	ldi	r24, 0x93	; 147
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	8c c7       	rjmp	.+3864   	; 0x1506 <_ZN6String6concatEc>
     5ee:	08 95       	ret

000005f0 <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	0b b6       	in	r0, 0x3b	; 59
     5fc:	0f 92       	push	r0
     5fe:	2f 93       	push	r18
     600:	3f 93       	push	r19
     602:	4f 93       	push	r20
     604:	5f 93       	push	r21
     606:	6f 93       	push	r22
     608:	7f 93       	push	r23
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
     60e:	af 93       	push	r26
     610:	bf 93       	push	r27
     612:	ef 93       	push	r30
     614:	ff 93       	push	r31
  Timer1.isrCallback();
     616:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <_ZN8TimerOne11isrCallbackE>
     61a:	f0 91 cc 02 	lds	r31, 0x02CC	; 0x8002cc <_ZN8TimerOne11isrCallbackE+0x1>
     61e:	19 95       	eicall
}
     620:	ff 91       	pop	r31
     622:	ef 91       	pop	r30
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	7f 91       	pop	r23
     62e:	6f 91       	pop	r22
     630:	5f 91       	pop	r21
     632:	4f 91       	pop	r20
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0b be       	out	0x3b, r0	; 59
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <__subsf3>:
     646:	50 58       	subi	r21, 0x80	; 128

00000648 <__addsf3>:
     648:	bb 27       	eor	r27, r27
     64a:	aa 27       	eor	r26, r26
     64c:	0e d0       	rcall	.+28     	; 0x66a <__addsf3x>
     64e:	4d c1       	rjmp	.+666    	; 0x8ea <__fp_round>
     650:	3e d1       	rcall	.+636    	; 0x8ce <__fp_pscA>
     652:	30 f0       	brcs	.+12     	; 0x660 <__addsf3+0x18>
     654:	43 d1       	rcall	.+646    	; 0x8dc <__fp_pscB>
     656:	20 f0       	brcs	.+8      	; 0x660 <__addsf3+0x18>
     658:	31 f4       	brne	.+12     	; 0x666 <__addsf3+0x1e>
     65a:	9f 3f       	cpi	r25, 0xFF	; 255
     65c:	11 f4       	brne	.+4      	; 0x662 <__addsf3+0x1a>
     65e:	1e f4       	brtc	.+6      	; 0x666 <__addsf3+0x1e>
     660:	33 c1       	rjmp	.+614    	; 0x8c8 <__fp_nan>
     662:	0e f4       	brtc	.+2      	; 0x666 <__addsf3+0x1e>
     664:	e0 95       	com	r30
     666:	e7 fb       	bst	r30, 7
     668:	29 c1       	rjmp	.+594    	; 0x8bc <__fp_inf>

0000066a <__addsf3x>:
     66a:	e9 2f       	mov	r30, r25
     66c:	4f d1       	rcall	.+670    	; 0x90c <__fp_split3>
     66e:	80 f3       	brcs	.-32     	; 0x650 <__addsf3+0x8>
     670:	ba 17       	cp	r27, r26
     672:	62 07       	cpc	r22, r18
     674:	73 07       	cpc	r23, r19
     676:	84 07       	cpc	r24, r20
     678:	95 07       	cpc	r25, r21
     67a:	18 f0       	brcs	.+6      	; 0x682 <__addsf3x+0x18>
     67c:	71 f4       	brne	.+28     	; 0x69a <__addsf3x+0x30>
     67e:	9e f5       	brtc	.+102    	; 0x6e6 <__addsf3x+0x7c>
     680:	67 c1       	rjmp	.+718    	; 0x950 <__fp_zero>
     682:	0e f4       	brtc	.+2      	; 0x686 <__addsf3x+0x1c>
     684:	e0 95       	com	r30
     686:	0b 2e       	mov	r0, r27
     688:	ba 2f       	mov	r27, r26
     68a:	a0 2d       	mov	r26, r0
     68c:	0b 01       	movw	r0, r22
     68e:	b9 01       	movw	r22, r18
     690:	90 01       	movw	r18, r0
     692:	0c 01       	movw	r0, r24
     694:	ca 01       	movw	r24, r20
     696:	a0 01       	movw	r20, r0
     698:	11 24       	eor	r1, r1
     69a:	ff 27       	eor	r31, r31
     69c:	59 1b       	sub	r21, r25
     69e:	99 f0       	breq	.+38     	; 0x6c6 <__addsf3x+0x5c>
     6a0:	59 3f       	cpi	r21, 0xF9	; 249
     6a2:	50 f4       	brcc	.+20     	; 0x6b8 <__addsf3x+0x4e>
     6a4:	50 3e       	cpi	r21, 0xE0	; 224
     6a6:	68 f1       	brcs	.+90     	; 0x702 <__addsf3x+0x98>
     6a8:	1a 16       	cp	r1, r26
     6aa:	f0 40       	sbci	r31, 0x00	; 0
     6ac:	a2 2f       	mov	r26, r18
     6ae:	23 2f       	mov	r18, r19
     6b0:	34 2f       	mov	r19, r20
     6b2:	44 27       	eor	r20, r20
     6b4:	58 5f       	subi	r21, 0xF8	; 248
     6b6:	f3 cf       	rjmp	.-26     	; 0x69e <__addsf3x+0x34>
     6b8:	46 95       	lsr	r20
     6ba:	37 95       	ror	r19
     6bc:	27 95       	ror	r18
     6be:	a7 95       	ror	r26
     6c0:	f0 40       	sbci	r31, 0x00	; 0
     6c2:	53 95       	inc	r21
     6c4:	c9 f7       	brne	.-14     	; 0x6b8 <__addsf3x+0x4e>
     6c6:	7e f4       	brtc	.+30     	; 0x6e6 <__addsf3x+0x7c>
     6c8:	1f 16       	cp	r1, r31
     6ca:	ba 0b       	sbc	r27, r26
     6cc:	62 0b       	sbc	r22, r18
     6ce:	73 0b       	sbc	r23, r19
     6d0:	84 0b       	sbc	r24, r20
     6d2:	ba f0       	brmi	.+46     	; 0x702 <__addsf3x+0x98>
     6d4:	91 50       	subi	r25, 0x01	; 1
     6d6:	a1 f0       	breq	.+40     	; 0x700 <__addsf3x+0x96>
     6d8:	ff 0f       	add	r31, r31
     6da:	bb 1f       	adc	r27, r27
     6dc:	66 1f       	adc	r22, r22
     6de:	77 1f       	adc	r23, r23
     6e0:	88 1f       	adc	r24, r24
     6e2:	c2 f7       	brpl	.-16     	; 0x6d4 <__addsf3x+0x6a>
     6e4:	0e c0       	rjmp	.+28     	; 0x702 <__addsf3x+0x98>
     6e6:	ba 0f       	add	r27, r26
     6e8:	62 1f       	adc	r22, r18
     6ea:	73 1f       	adc	r23, r19
     6ec:	84 1f       	adc	r24, r20
     6ee:	48 f4       	brcc	.+18     	; 0x702 <__addsf3x+0x98>
     6f0:	87 95       	ror	r24
     6f2:	77 95       	ror	r23
     6f4:	67 95       	ror	r22
     6f6:	b7 95       	ror	r27
     6f8:	f7 95       	ror	r31
     6fa:	9e 3f       	cpi	r25, 0xFE	; 254
     6fc:	08 f0       	brcs	.+2      	; 0x700 <__addsf3x+0x96>
     6fe:	b3 cf       	rjmp	.-154    	; 0x666 <__addsf3+0x1e>
     700:	93 95       	inc	r25
     702:	88 0f       	add	r24, r24
     704:	08 f0       	brcs	.+2      	; 0x708 <__addsf3x+0x9e>
     706:	99 27       	eor	r25, r25
     708:	ee 0f       	add	r30, r30
     70a:	97 95       	ror	r25
     70c:	87 95       	ror	r24
     70e:	08 95       	ret

00000710 <__divsf3>:
     710:	0c d0       	rcall	.+24     	; 0x72a <__divsf3x>
     712:	eb c0       	rjmp	.+470    	; 0x8ea <__fp_round>
     714:	e3 d0       	rcall	.+454    	; 0x8dc <__fp_pscB>
     716:	40 f0       	brcs	.+16     	; 0x728 <__divsf3+0x18>
     718:	da d0       	rcall	.+436    	; 0x8ce <__fp_pscA>
     71a:	30 f0       	brcs	.+12     	; 0x728 <__divsf3+0x18>
     71c:	21 f4       	brne	.+8      	; 0x726 <__divsf3+0x16>
     71e:	5f 3f       	cpi	r21, 0xFF	; 255
     720:	19 f0       	breq	.+6      	; 0x728 <__divsf3+0x18>
     722:	cc c0       	rjmp	.+408    	; 0x8bc <__fp_inf>
     724:	51 11       	cpse	r21, r1
     726:	15 c1       	rjmp	.+554    	; 0x952 <__fp_szero>
     728:	cf c0       	rjmp	.+414    	; 0x8c8 <__fp_nan>

0000072a <__divsf3x>:
     72a:	f0 d0       	rcall	.+480    	; 0x90c <__fp_split3>
     72c:	98 f3       	brcs	.-26     	; 0x714 <__divsf3+0x4>

0000072e <__divsf3_pse>:
     72e:	99 23       	and	r25, r25
     730:	c9 f3       	breq	.-14     	; 0x724 <__divsf3+0x14>
     732:	55 23       	and	r21, r21
     734:	b1 f3       	breq	.-20     	; 0x722 <__divsf3+0x12>
     736:	95 1b       	sub	r25, r21
     738:	55 0b       	sbc	r21, r21
     73a:	bb 27       	eor	r27, r27
     73c:	aa 27       	eor	r26, r26
     73e:	62 17       	cp	r22, r18
     740:	73 07       	cpc	r23, r19
     742:	84 07       	cpc	r24, r20
     744:	38 f0       	brcs	.+14     	; 0x754 <__divsf3_pse+0x26>
     746:	9f 5f       	subi	r25, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	22 0f       	add	r18, r18
     74c:	33 1f       	adc	r19, r19
     74e:	44 1f       	adc	r20, r20
     750:	aa 1f       	adc	r26, r26
     752:	a9 f3       	breq	.-22     	; 0x73e <__divsf3_pse+0x10>
     754:	33 d0       	rcall	.+102    	; 0x7bc <__divsf3_pse+0x8e>
     756:	0e 2e       	mov	r0, r30
     758:	3a f0       	brmi	.+14     	; 0x768 <__divsf3_pse+0x3a>
     75a:	e0 e8       	ldi	r30, 0x80	; 128
     75c:	30 d0       	rcall	.+96     	; 0x7be <__divsf3_pse+0x90>
     75e:	91 50       	subi	r25, 0x01	; 1
     760:	50 40       	sbci	r21, 0x00	; 0
     762:	e6 95       	lsr	r30
     764:	00 1c       	adc	r0, r0
     766:	ca f7       	brpl	.-14     	; 0x75a <__divsf3_pse+0x2c>
     768:	29 d0       	rcall	.+82     	; 0x7bc <__divsf3_pse+0x8e>
     76a:	fe 2f       	mov	r31, r30
     76c:	27 d0       	rcall	.+78     	; 0x7bc <__divsf3_pse+0x8e>
     76e:	66 0f       	add	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	88 1f       	adc	r24, r24
     774:	bb 1f       	adc	r27, r27
     776:	26 17       	cp	r18, r22
     778:	37 07       	cpc	r19, r23
     77a:	48 07       	cpc	r20, r24
     77c:	ab 07       	cpc	r26, r27
     77e:	b0 e8       	ldi	r27, 0x80	; 128
     780:	09 f0       	breq	.+2      	; 0x784 <__divsf3_pse+0x56>
     782:	bb 0b       	sbc	r27, r27
     784:	80 2d       	mov	r24, r0
     786:	bf 01       	movw	r22, r30
     788:	ff 27       	eor	r31, r31
     78a:	93 58       	subi	r25, 0x83	; 131
     78c:	5f 4f       	sbci	r21, 0xFF	; 255
     78e:	2a f0       	brmi	.+10     	; 0x79a <__divsf3_pse+0x6c>
     790:	9e 3f       	cpi	r25, 0xFE	; 254
     792:	51 05       	cpc	r21, r1
     794:	68 f0       	brcs	.+26     	; 0x7b0 <__divsf3_pse+0x82>
     796:	92 c0       	rjmp	.+292    	; 0x8bc <__fp_inf>
     798:	dc c0       	rjmp	.+440    	; 0x952 <__fp_szero>
     79a:	5f 3f       	cpi	r21, 0xFF	; 255
     79c:	ec f3       	brlt	.-6      	; 0x798 <__divsf3_pse+0x6a>
     79e:	98 3e       	cpi	r25, 0xE8	; 232
     7a0:	dc f3       	brlt	.-10     	; 0x798 <__divsf3_pse+0x6a>
     7a2:	86 95       	lsr	r24
     7a4:	77 95       	ror	r23
     7a6:	67 95       	ror	r22
     7a8:	b7 95       	ror	r27
     7aa:	f7 95       	ror	r31
     7ac:	9f 5f       	subi	r25, 0xFF	; 255
     7ae:	c9 f7       	brne	.-14     	; 0x7a2 <__divsf3_pse+0x74>
     7b0:	88 0f       	add	r24, r24
     7b2:	91 1d       	adc	r25, r1
     7b4:	96 95       	lsr	r25
     7b6:	87 95       	ror	r24
     7b8:	97 f9       	bld	r25, 7
     7ba:	08 95       	ret
     7bc:	e1 e0       	ldi	r30, 0x01	; 1
     7be:	66 0f       	add	r22, r22
     7c0:	77 1f       	adc	r23, r23
     7c2:	88 1f       	adc	r24, r24
     7c4:	bb 1f       	adc	r27, r27
     7c6:	62 17       	cp	r22, r18
     7c8:	73 07       	cpc	r23, r19
     7ca:	84 07       	cpc	r24, r20
     7cc:	ba 07       	cpc	r27, r26
     7ce:	20 f0       	brcs	.+8      	; 0x7d8 <__divsf3_pse+0xaa>
     7d0:	62 1b       	sub	r22, r18
     7d2:	73 0b       	sbc	r23, r19
     7d4:	84 0b       	sbc	r24, r20
     7d6:	ba 0b       	sbc	r27, r26
     7d8:	ee 1f       	adc	r30, r30
     7da:	88 f7       	brcc	.-30     	; 0x7be <__divsf3_pse+0x90>
     7dc:	e0 95       	com	r30
     7de:	08 95       	ret

000007e0 <__fixsfsi>:
     7e0:	04 d0       	rcall	.+8      	; 0x7ea <__fixunssfsi>
     7e2:	68 94       	set
     7e4:	b1 11       	cpse	r27, r1
     7e6:	b5 c0       	rjmp	.+362    	; 0x952 <__fp_szero>
     7e8:	08 95       	ret

000007ea <__fixunssfsi>:
     7ea:	98 d0       	rcall	.+304    	; 0x91c <__fp_splitA>
     7ec:	88 f0       	brcs	.+34     	; 0x810 <__fixunssfsi+0x26>
     7ee:	9f 57       	subi	r25, 0x7F	; 127
     7f0:	90 f0       	brcs	.+36     	; 0x816 <__fixunssfsi+0x2c>
     7f2:	b9 2f       	mov	r27, r25
     7f4:	99 27       	eor	r25, r25
     7f6:	b7 51       	subi	r27, 0x17	; 23
     7f8:	a0 f0       	brcs	.+40     	; 0x822 <__fixunssfsi+0x38>
     7fa:	d1 f0       	breq	.+52     	; 0x830 <__fixunssfsi+0x46>
     7fc:	66 0f       	add	r22, r22
     7fe:	77 1f       	adc	r23, r23
     800:	88 1f       	adc	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	1a f0       	brmi	.+6      	; 0x80c <__fixunssfsi+0x22>
     806:	ba 95       	dec	r27
     808:	c9 f7       	brne	.-14     	; 0x7fc <__fixunssfsi+0x12>
     80a:	12 c0       	rjmp	.+36     	; 0x830 <__fixunssfsi+0x46>
     80c:	b1 30       	cpi	r27, 0x01	; 1
     80e:	81 f0       	breq	.+32     	; 0x830 <__fixunssfsi+0x46>
     810:	9f d0       	rcall	.+318    	; 0x950 <__fp_zero>
     812:	b1 e0       	ldi	r27, 0x01	; 1
     814:	08 95       	ret
     816:	9c c0       	rjmp	.+312    	; 0x950 <__fp_zero>
     818:	67 2f       	mov	r22, r23
     81a:	78 2f       	mov	r23, r24
     81c:	88 27       	eor	r24, r24
     81e:	b8 5f       	subi	r27, 0xF8	; 248
     820:	39 f0       	breq	.+14     	; 0x830 <__fixunssfsi+0x46>
     822:	b9 3f       	cpi	r27, 0xF9	; 249
     824:	cc f3       	brlt	.-14     	; 0x818 <__fixunssfsi+0x2e>
     826:	86 95       	lsr	r24
     828:	77 95       	ror	r23
     82a:	67 95       	ror	r22
     82c:	b3 95       	inc	r27
     82e:	d9 f7       	brne	.-10     	; 0x826 <__fixunssfsi+0x3c>
     830:	3e f4       	brtc	.+14     	; 0x840 <__fixunssfsi+0x56>
     832:	90 95       	com	r25
     834:	80 95       	com	r24
     836:	70 95       	com	r23
     838:	61 95       	neg	r22
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	8f 4f       	sbci	r24, 0xFF	; 255
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	08 95       	ret

00000842 <__floatunsisf>:
     842:	e8 94       	clt
     844:	09 c0       	rjmp	.+18     	; 0x858 <__floatsisf+0x12>

00000846 <__floatsisf>:
     846:	97 fb       	bst	r25, 7
     848:	3e f4       	brtc	.+14     	; 0x858 <__floatsisf+0x12>
     84a:	90 95       	com	r25
     84c:	80 95       	com	r24
     84e:	70 95       	com	r23
     850:	61 95       	neg	r22
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	8f 4f       	sbci	r24, 0xFF	; 255
     856:	9f 4f       	sbci	r25, 0xFF	; 255
     858:	99 23       	and	r25, r25
     85a:	a9 f0       	breq	.+42     	; 0x886 <__floatsisf+0x40>
     85c:	f9 2f       	mov	r31, r25
     85e:	96 e9       	ldi	r25, 0x96	; 150
     860:	bb 27       	eor	r27, r27
     862:	93 95       	inc	r25
     864:	f6 95       	lsr	r31
     866:	87 95       	ror	r24
     868:	77 95       	ror	r23
     86a:	67 95       	ror	r22
     86c:	b7 95       	ror	r27
     86e:	f1 11       	cpse	r31, r1
     870:	f8 cf       	rjmp	.-16     	; 0x862 <__floatsisf+0x1c>
     872:	fa f4       	brpl	.+62     	; 0x8b2 <__floatsisf+0x6c>
     874:	bb 0f       	add	r27, r27
     876:	11 f4       	brne	.+4      	; 0x87c <__floatsisf+0x36>
     878:	60 ff       	sbrs	r22, 0
     87a:	1b c0       	rjmp	.+54     	; 0x8b2 <__floatsisf+0x6c>
     87c:	6f 5f       	subi	r22, 0xFF	; 255
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	8f 4f       	sbci	r24, 0xFF	; 255
     882:	9f 4f       	sbci	r25, 0xFF	; 255
     884:	16 c0       	rjmp	.+44     	; 0x8b2 <__floatsisf+0x6c>
     886:	88 23       	and	r24, r24
     888:	11 f0       	breq	.+4      	; 0x88e <__floatsisf+0x48>
     88a:	96 e9       	ldi	r25, 0x96	; 150
     88c:	11 c0       	rjmp	.+34     	; 0x8b0 <__floatsisf+0x6a>
     88e:	77 23       	and	r23, r23
     890:	21 f0       	breq	.+8      	; 0x89a <__floatsisf+0x54>
     892:	9e e8       	ldi	r25, 0x8E	; 142
     894:	87 2f       	mov	r24, r23
     896:	76 2f       	mov	r23, r22
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <__floatsisf+0x5e>
     89a:	66 23       	and	r22, r22
     89c:	71 f0       	breq	.+28     	; 0x8ba <__floatsisf+0x74>
     89e:	96 e8       	ldi	r25, 0x86	; 134
     8a0:	86 2f       	mov	r24, r22
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	2a f0       	brmi	.+10     	; 0x8b2 <__floatsisf+0x6c>
     8a8:	9a 95       	dec	r25
     8aa:	66 0f       	add	r22, r22
     8ac:	77 1f       	adc	r23, r23
     8ae:	88 1f       	adc	r24, r24
     8b0:	da f7       	brpl	.-10     	; 0x8a8 <__floatsisf+0x62>
     8b2:	88 0f       	add	r24, r24
     8b4:	96 95       	lsr	r25
     8b6:	87 95       	ror	r24
     8b8:	97 f9       	bld	r25, 7
     8ba:	08 95       	ret

000008bc <__fp_inf>:
     8bc:	97 f9       	bld	r25, 7
     8be:	9f 67       	ori	r25, 0x7F	; 127
     8c0:	80 e8       	ldi	r24, 0x80	; 128
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	08 95       	ret

000008c8 <__fp_nan>:
     8c8:	9f ef       	ldi	r25, 0xFF	; 255
     8ca:	80 ec       	ldi	r24, 0xC0	; 192
     8cc:	08 95       	ret

000008ce <__fp_pscA>:
     8ce:	00 24       	eor	r0, r0
     8d0:	0a 94       	dec	r0
     8d2:	16 16       	cp	r1, r22
     8d4:	17 06       	cpc	r1, r23
     8d6:	18 06       	cpc	r1, r24
     8d8:	09 06       	cpc	r0, r25
     8da:	08 95       	ret

000008dc <__fp_pscB>:
     8dc:	00 24       	eor	r0, r0
     8de:	0a 94       	dec	r0
     8e0:	12 16       	cp	r1, r18
     8e2:	13 06       	cpc	r1, r19
     8e4:	14 06       	cpc	r1, r20
     8e6:	05 06       	cpc	r0, r21
     8e8:	08 95       	ret

000008ea <__fp_round>:
     8ea:	09 2e       	mov	r0, r25
     8ec:	03 94       	inc	r0
     8ee:	00 0c       	add	r0, r0
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <__fp_round+0xc>
     8f2:	88 23       	and	r24, r24
     8f4:	52 f0       	brmi	.+20     	; 0x90a <__fp_round+0x20>
     8f6:	bb 0f       	add	r27, r27
     8f8:	40 f4       	brcc	.+16     	; 0x90a <__fp_round+0x20>
     8fa:	bf 2b       	or	r27, r31
     8fc:	11 f4       	brne	.+4      	; 0x902 <__fp_round+0x18>
     8fe:	60 ff       	sbrs	r22, 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fp_round+0x20>
     902:	6f 5f       	subi	r22, 0xFF	; 255
     904:	7f 4f       	sbci	r23, 0xFF	; 255
     906:	8f 4f       	sbci	r24, 0xFF	; 255
     908:	9f 4f       	sbci	r25, 0xFF	; 255
     90a:	08 95       	ret

0000090c <__fp_split3>:
     90c:	57 fd       	sbrc	r21, 7
     90e:	90 58       	subi	r25, 0x80	; 128
     910:	44 0f       	add	r20, r20
     912:	55 1f       	adc	r21, r21
     914:	59 f0       	breq	.+22     	; 0x92c <__fp_splitA+0x10>
     916:	5f 3f       	cpi	r21, 0xFF	; 255
     918:	71 f0       	breq	.+28     	; 0x936 <__fp_splitA+0x1a>
     91a:	47 95       	ror	r20

0000091c <__fp_splitA>:
     91c:	88 0f       	add	r24, r24
     91e:	97 fb       	bst	r25, 7
     920:	99 1f       	adc	r25, r25
     922:	61 f0       	breq	.+24     	; 0x93c <__fp_splitA+0x20>
     924:	9f 3f       	cpi	r25, 0xFF	; 255
     926:	79 f0       	breq	.+30     	; 0x946 <__fp_splitA+0x2a>
     928:	87 95       	ror	r24
     92a:	08 95       	ret
     92c:	12 16       	cp	r1, r18
     92e:	13 06       	cpc	r1, r19
     930:	14 06       	cpc	r1, r20
     932:	55 1f       	adc	r21, r21
     934:	f2 cf       	rjmp	.-28     	; 0x91a <__fp_split3+0xe>
     936:	46 95       	lsr	r20
     938:	f1 df       	rcall	.-30     	; 0x91c <__fp_splitA>
     93a:	08 c0       	rjmp	.+16     	; 0x94c <__fp_splitA+0x30>
     93c:	16 16       	cp	r1, r22
     93e:	17 06       	cpc	r1, r23
     940:	18 06       	cpc	r1, r24
     942:	99 1f       	adc	r25, r25
     944:	f1 cf       	rjmp	.-30     	; 0x928 <__fp_splitA+0xc>
     946:	86 95       	lsr	r24
     948:	71 05       	cpc	r23, r1
     94a:	61 05       	cpc	r22, r1
     94c:	08 94       	sec
     94e:	08 95       	ret

00000950 <__fp_zero>:
     950:	e8 94       	clt

00000952 <__fp_szero>:
     952:	bb 27       	eor	r27, r27
     954:	66 27       	eor	r22, r22
     956:	77 27       	eor	r23, r23
     958:	cb 01       	movw	r24, r22
     95a:	97 f9       	bld	r25, 7
     95c:	08 95       	ret

0000095e <__mulsf3>:
     95e:	0b d0       	rcall	.+22     	; 0x976 <__mulsf3x>
     960:	c4 cf       	rjmp	.-120    	; 0x8ea <__fp_round>
     962:	b5 df       	rcall	.-150    	; 0x8ce <__fp_pscA>
     964:	28 f0       	brcs	.+10     	; 0x970 <__mulsf3+0x12>
     966:	ba df       	rcall	.-140    	; 0x8dc <__fp_pscB>
     968:	18 f0       	brcs	.+6      	; 0x970 <__mulsf3+0x12>
     96a:	95 23       	and	r25, r21
     96c:	09 f0       	breq	.+2      	; 0x970 <__mulsf3+0x12>
     96e:	a6 cf       	rjmp	.-180    	; 0x8bc <__fp_inf>
     970:	ab cf       	rjmp	.-170    	; 0x8c8 <__fp_nan>
     972:	11 24       	eor	r1, r1
     974:	ee cf       	rjmp	.-36     	; 0x952 <__fp_szero>

00000976 <__mulsf3x>:
     976:	ca df       	rcall	.-108    	; 0x90c <__fp_split3>
     978:	a0 f3       	brcs	.-24     	; 0x962 <__mulsf3+0x4>

0000097a <__mulsf3_pse>:
     97a:	95 9f       	mul	r25, r21
     97c:	d1 f3       	breq	.-12     	; 0x972 <__mulsf3+0x14>
     97e:	95 0f       	add	r25, r21
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	55 1f       	adc	r21, r21
     984:	62 9f       	mul	r22, r18
     986:	f0 01       	movw	r30, r0
     988:	72 9f       	mul	r23, r18
     98a:	bb 27       	eor	r27, r27
     98c:	f0 0d       	add	r31, r0
     98e:	b1 1d       	adc	r27, r1
     990:	63 9f       	mul	r22, r19
     992:	aa 27       	eor	r26, r26
     994:	f0 0d       	add	r31, r0
     996:	b1 1d       	adc	r27, r1
     998:	aa 1f       	adc	r26, r26
     99a:	64 9f       	mul	r22, r20
     99c:	66 27       	eor	r22, r22
     99e:	b0 0d       	add	r27, r0
     9a0:	a1 1d       	adc	r26, r1
     9a2:	66 1f       	adc	r22, r22
     9a4:	82 9f       	mul	r24, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	b0 0d       	add	r27, r0
     9aa:	a1 1d       	adc	r26, r1
     9ac:	62 1f       	adc	r22, r18
     9ae:	73 9f       	mul	r23, r19
     9b0:	b0 0d       	add	r27, r0
     9b2:	a1 1d       	adc	r26, r1
     9b4:	62 1f       	adc	r22, r18
     9b6:	83 9f       	mul	r24, r19
     9b8:	a0 0d       	add	r26, r0
     9ba:	61 1d       	adc	r22, r1
     9bc:	22 1f       	adc	r18, r18
     9be:	74 9f       	mul	r23, r20
     9c0:	33 27       	eor	r19, r19
     9c2:	a0 0d       	add	r26, r0
     9c4:	61 1d       	adc	r22, r1
     9c6:	23 1f       	adc	r18, r19
     9c8:	84 9f       	mul	r24, r20
     9ca:	60 0d       	add	r22, r0
     9cc:	21 1d       	adc	r18, r1
     9ce:	82 2f       	mov	r24, r18
     9d0:	76 2f       	mov	r23, r22
     9d2:	6a 2f       	mov	r22, r26
     9d4:	11 24       	eor	r1, r1
     9d6:	9f 57       	subi	r25, 0x7F	; 127
     9d8:	50 40       	sbci	r21, 0x00	; 0
     9da:	8a f0       	brmi	.+34     	; 0x9fe <__mulsf3_pse+0x84>
     9dc:	e1 f0       	breq	.+56     	; 0xa16 <__mulsf3_pse+0x9c>
     9de:	88 23       	and	r24, r24
     9e0:	4a f0       	brmi	.+18     	; 0x9f4 <__mulsf3_pse+0x7a>
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	bb 1f       	adc	r27, r27
     9e8:	66 1f       	adc	r22, r22
     9ea:	77 1f       	adc	r23, r23
     9ec:	88 1f       	adc	r24, r24
     9ee:	91 50       	subi	r25, 0x01	; 1
     9f0:	50 40       	sbci	r21, 0x00	; 0
     9f2:	a9 f7       	brne	.-22     	; 0x9de <__mulsf3_pse+0x64>
     9f4:	9e 3f       	cpi	r25, 0xFE	; 254
     9f6:	51 05       	cpc	r21, r1
     9f8:	70 f0       	brcs	.+28     	; 0xa16 <__mulsf3_pse+0x9c>
     9fa:	60 cf       	rjmp	.-320    	; 0x8bc <__fp_inf>
     9fc:	aa cf       	rjmp	.-172    	; 0x952 <__fp_szero>
     9fe:	5f 3f       	cpi	r21, 0xFF	; 255
     a00:	ec f3       	brlt	.-6      	; 0x9fc <__mulsf3_pse+0x82>
     a02:	98 3e       	cpi	r25, 0xE8	; 232
     a04:	dc f3       	brlt	.-10     	; 0x9fc <__mulsf3_pse+0x82>
     a06:	86 95       	lsr	r24
     a08:	77 95       	ror	r23
     a0a:	67 95       	ror	r22
     a0c:	b7 95       	ror	r27
     a0e:	f7 95       	ror	r31
     a10:	e7 95       	ror	r30
     a12:	9f 5f       	subi	r25, 0xFF	; 255
     a14:	c1 f7       	brne	.-16     	; 0xa06 <__mulsf3_pse+0x8c>
     a16:	fe 2b       	or	r31, r30
     a18:	88 0f       	add	r24, r24
     a1a:	91 1d       	adc	r25, r1
     a1c:	96 95       	lsr	r25
     a1e:	87 95       	ror	r24
     a20:	97 f9       	bld	r25, 7
     a22:	08 95       	ret

00000a24 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     a24:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     a26:	91 8d       	ldd	r25, Z+25	; 0x19
     a28:	22 8d       	ldd	r18, Z+26	; 0x1a
     a2a:	89 2f       	mov	r24, r25
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	80 5c       	subi	r24, 0xC0	; 192
     a30:	9f 4f       	sbci	r25, 0xFF	; 255
     a32:	82 1b       	sub	r24, r18
     a34:	91 09       	sbc	r25, r1
}
     a36:	8f 73       	andi	r24, 0x3F	; 63
     a38:	99 27       	eor	r25, r25
     a3a:	08 95       	ret

00000a3c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     a3c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     a3e:	91 8d       	ldd	r25, Z+25	; 0x19
     a40:	82 8d       	ldd	r24, Z+26	; 0x1a
     a42:	98 17       	cp	r25, r24
     a44:	31 f0       	breq	.+12     	; 0xa52 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     a46:	82 8d       	ldd	r24, Z+26	; 0x1a
     a48:	e8 0f       	add	r30, r24
     a4a:	f1 1d       	adc	r31, r1
     a4c:	85 8d       	ldd	r24, Z+29	; 0x1d
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     a56:	08 95       	ret

00000a58 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     a58:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     a5a:	91 8d       	ldd	r25, Z+25	; 0x19
     a5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a5e:	98 17       	cp	r25, r24
     a60:	61 f0       	breq	.+24     	; 0xa7a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     a62:	82 8d       	ldd	r24, Z+26	; 0x1a
     a64:	df 01       	movw	r26, r30
     a66:	a8 0f       	add	r26, r24
     a68:	b1 1d       	adc	r27, r1
     a6a:	5d 96       	adiw	r26, 0x1d	; 29
     a6c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a6e:	92 8d       	ldd	r25, Z+26	; 0x1a
     a70:	9f 5f       	subi	r25, 0xFF	; 255
     a72:	9f 73       	andi	r25, 0x3F	; 63
     a74:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     a7e:	08 95       	ret

00000a80 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     a80:	fc 01       	movw	r30, r24
     a82:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     a84:	44 8d       	ldd	r20, Z+28	; 0x1c
     a86:	25 2f       	mov	r18, r21
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	84 2f       	mov	r24, r20
     a8c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     a8e:	82 1b       	sub	r24, r18
     a90:	93 0b       	sbc	r25, r19
     a92:	54 17       	cp	r21, r20
     a94:	10 f0       	brcs	.+4      	; 0xa9a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     a96:	cf 96       	adiw	r24, 0x3f	; 63
     a98:	08 95       	ret
  return tail - head - 1;
     a9a:	01 97       	sbiw	r24, 0x01	; 1
}
     a9c:	08 95       	ret

00000a9e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a9e:	8b ed       	ldi	r24, 0xDB	; 219
     aa0:	96 e0       	ldi	r25, 0x06	; 6
     aa2:	89 2b       	or	r24, r25
     aa4:	39 f0       	breq	.+14     	; 0xab4 <_Z14serialEventRunv+0x16>
     aa6:	85 ee       	ldi	r24, 0xE5	; 229
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	89 2b       	or	r24, r25
     aac:	19 f0       	breq	.+6      	; 0xab4 <_Z14serialEventRunv+0x16>
     aae:	83 d1       	rcall	.+774    	; 0xdb6 <_Z17Serial0_availablev>
     ab0:	81 11       	cpse	r24, r1
     ab2:	25 c0       	rjmp	.+74     	; 0xafe <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	89 2b       	or	r24, r25
     aba:	41 f0       	breq	.+16     	; 0xacc <_Z14serialEventRunv+0x2e>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	89 2b       	or	r24, r25
     ac2:	21 f0       	breq	.+8      	; 0xacc <_Z14serialEventRunv+0x2e>
     ac4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ac8:	81 11       	cpse	r24, r1
     aca:	1b c0       	rjmp	.+54     	; 0xb02 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	89 2b       	or	r24, r25
     ad2:	41 f0       	breq	.+16     	; 0xae4 <_Z14serialEventRunv+0x46>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	89 2b       	or	r24, r25
     ada:	21 f0       	breq	.+8      	; 0xae4 <_Z14serialEventRunv+0x46>
     adc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ae0:	81 11       	cpse	r24, r1
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	89 2b       	or	r24, r25
     aea:	99 f0       	breq	.+38     	; 0xb12 <_Z14serialEventRunv+0x74>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	89 2b       	or	r24, r25
     af2:	79 f0       	breq	.+30     	; 0xb12 <_Z14serialEventRunv+0x74>
     af4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     af8:	81 11       	cpse	r24, r1
     afa:	09 c0       	rjmp	.+18     	; 0xb0e <_Z14serialEventRunv+0x70>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     afc:	08 95       	ret
     afe:	65 dd       	rcall	.-1334   	; 0x5ca <_Z11serialEventv>
     b00:	d9 cf       	rjmp	.-78     	; 0xab4 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     b02:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     b06:	e2 cf       	rjmp	.-60     	; 0xacc <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     b08:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     b0c:	eb cf       	rjmp	.-42     	; 0xae4 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     b0e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     b12:	08 95       	ret

00000b14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     b14:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     b16:	84 8d       	ldd	r24, Z+28	; 0x1c
     b18:	df 01       	movw	r26, r30
     b1a:	a8 0f       	add	r26, r24
     b1c:	b1 1d       	adc	r27, r1
     b1e:	a3 5a       	subi	r26, 0xA3	; 163
     b20:	bf 4f       	sbci	r27, 0xFF	; 255
     b22:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     b24:	84 8d       	ldd	r24, Z+28	; 0x1c
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	8f 73       	andi	r24, 0x3F	; 63
     b2c:	99 27       	eor	r25, r25
     b2e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     b30:	a6 89       	ldd	r26, Z+22	; 0x16
     b32:	b7 89       	ldd	r27, Z+23	; 0x17
     b34:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     b36:	a0 89       	ldd	r26, Z+16	; 0x10
     b38:	b1 89       	ldd	r27, Z+17	; 0x11
     b3a:	8c 91       	ld	r24, X
     b3c:	83 70       	andi	r24, 0x03	; 3
     b3e:	80 64       	ori	r24, 0x40	; 64
     b40:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     b42:	93 8d       	ldd	r25, Z+27	; 0x1b
     b44:	84 8d       	ldd	r24, Z+28	; 0x1c
     b46:	98 13       	cpse	r25, r24
     b48:	06 c0       	rjmp	.+12     	; 0xb56 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     b4a:	02 88       	ldd	r0, Z+18	; 0x12
     b4c:	f3 89       	ldd	r31, Z+19	; 0x13
     b4e:	e0 2d       	mov	r30, r0
     b50:	80 81       	ld	r24, Z
     b52:	8f 7d       	andi	r24, 0xDF	; 223
     b54:	80 83       	st	Z, r24
     b56:	08 95       	ret

00000b58 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ec 01       	movw	r28, r24
  _written = true;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     b6a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b6e:	98 13       	cpse	r25, r24
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <_ZN14HardwareSerial5writeEh+0x24>
     b72:	e8 89       	ldd	r30, Y+16	; 0x10
     b74:	f9 89       	ldd	r31, Y+17	; 0x11
     b76:	80 81       	ld	r24, Z
     b78:	85 fd       	sbrc	r24, 5
     b7a:	25 c0       	rjmp	.+74     	; 0xbc6 <_ZN14HardwareSerial5writeEh+0x6e>
     b7c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b7e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	0f 5f       	subi	r16, 0xFF	; 255
     b84:	1f 4f       	sbci	r17, 0xFF	; 255
     b86:	0f 73       	andi	r16, 0x3F	; 63
     b88:	11 27       	eor	r17, r17
     b8a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b8e:	e8 12       	cpse	r14, r24
     b90:	0b c0       	rjmp	.+22     	; 0xba8 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	07 fc       	sbrc	r0, 7
     b96:	fa cf       	rjmp	.-12     	; 0xb8c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b98:	e8 89       	ldd	r30, Y+16	; 0x10
     b9a:	f9 89       	ldd	r31, Y+17	; 0x11
     b9c:	80 81       	ld	r24, Z
     b9e:	85 ff       	sbrs	r24, 5
     ba0:	f5 cf       	rjmp	.-22     	; 0xb8c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     ba2:	ce 01       	movw	r24, r28
     ba4:	b7 df       	rcall	.-146    	; 0xb14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ba6:	f2 cf       	rjmp	.-28     	; 0xb8c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     ba8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     baa:	fe 01       	movw	r30, r28
     bac:	e8 0f       	add	r30, r24
     bae:	f1 1d       	adc	r31, r1
     bb0:	e3 5a       	subi	r30, 0xA3	; 163
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     bb6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bb8:	f8 94       	cli
    _tx_buffer_head = i;
     bba:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     bbc:	ea 89       	ldd	r30, Y+18	; 0x12
     bbe:	fb 89       	ldd	r31, Y+19	; 0x13
     bc0:	80 81       	ld	r24, Z
     bc2:	80 62       	ori	r24, 0x20	; 32
     bc4:	0a c0       	rjmp	.+20     	; 0xbda <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     bc6:	9f b7       	in	r25, 0x3f	; 63
     bc8:	f8 94       	cli
      *_udr = c;
     bca:	ee 89       	ldd	r30, Y+22	; 0x16
     bcc:	ff 89       	ldd	r31, Y+23	; 0x17
     bce:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     bd0:	e8 89       	ldd	r30, Y+16	; 0x10
     bd2:	f9 89       	ldd	r31, Y+17	; 0x11
     bd4:	80 81       	ld	r24, Z
     bd6:	83 70       	andi	r24, 0x03	; 3
     bd8:	80 64       	ori	r24, 0x40	; 64
     bda:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bdc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	08 95       	ret

00000bf0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     bf6:	88 8d       	ldd	r24, Y+24	; 0x18
     bf8:	88 23       	and	r24, r24
     bfa:	c1 f0       	breq	.+48     	; 0xc2c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     bfc:	ea 89       	ldd	r30, Y+18	; 0x12
     bfe:	fb 89       	ldd	r31, Y+19	; 0x13
     c00:	80 81       	ld	r24, Z
     c02:	85 fd       	sbrc	r24, 5
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <_ZN14HardwareSerial5flushEv+0x20>
     c06:	a8 89       	ldd	r26, Y+16	; 0x10
     c08:	b9 89       	ldd	r27, Y+17	; 0x11
     c0a:	8c 91       	ld	r24, X
     c0c:	86 fd       	sbrc	r24, 6
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	07 fc       	sbrc	r0, 7
     c14:	f5 cf       	rjmp	.-22     	; 0xc00 <_ZN14HardwareSerial5flushEv+0x10>
     c16:	80 81       	ld	r24, Z
     c18:	85 ff       	sbrs	r24, 5
     c1a:	f2 cf       	rjmp	.-28     	; 0xc00 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     c1c:	a8 89       	ldd	r26, Y+16	; 0x10
     c1e:	b9 89       	ldd	r27, Y+17	; 0x11
     c20:	8c 91       	ld	r24, X
     c22:	85 ff       	sbrs	r24, 5
     c24:	ed cf       	rjmp	.-38     	; 0xc00 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     c26:	ce 01       	movw	r24, r28
     c28:	75 df       	rcall	.-278    	; 0xb14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c2a:	e8 cf       	rjmp	.-48     	; 0xbfc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
     c42:	6a 01       	movw	r12, r20
     c44:	7b 01       	movw	r14, r22
     c46:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     c48:	e8 89       	ldd	r30, Y+16	; 0x10
     c4a:	f9 89       	ldd	r31, Y+17	; 0x11
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c50:	41 15       	cp	r20, r1
     c52:	51 4e       	sbci	r21, 0xE1	; 225
     c54:	61 05       	cpc	r22, r1
     c56:	71 05       	cpc	r23, r1
     c58:	a9 f0       	breq	.+42     	; 0xc84 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	79 e0       	ldi	r23, 0x09	; 9
     c5e:	8d e3       	ldi	r24, 0x3D	; 61
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a7 01       	movw	r20, r14
     c64:	96 01       	movw	r18, r12
     c66:	52 d6       	rcall	.+3236   	; 0x190c <__udivmodsi4>
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	a1 09       	sbc	r26, r1
     c70:	b1 09       	sbc	r27, r1
     c72:	b6 95       	lsr	r27
     c74:	a7 95       	ror	r26
     c76:	97 95       	ror	r25
     c78:	87 95       	ror	r24
     c7a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c7c:	21 15       	cp	r18, r1
     c7e:	80 e1       	ldi	r24, 0x10	; 16
     c80:	38 07       	cpc	r19, r24
     c82:	a0 f0       	brcs	.+40     	; 0xcac <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     c84:	e8 89       	ldd	r30, Y+16	; 0x10
     c86:	f9 89       	ldd	r31, Y+17	; 0x11
     c88:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     c8a:	60 e8       	ldi	r22, 0x80	; 128
     c8c:	74 e8       	ldi	r23, 0x84	; 132
     c8e:	8e e1       	ldi	r24, 0x1E	; 30
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	a7 01       	movw	r20, r14
     c94:	96 01       	movw	r18, r12
     c96:	3a d6       	rcall	.+3188   	; 0x190c <__udivmodsi4>
     c98:	da 01       	movw	r26, r20
     c9a:	c9 01       	movw	r24, r18
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	a1 09       	sbc	r26, r1
     ca0:	b1 09       	sbc	r27, r1
     ca2:	b6 95       	lsr	r27
     ca4:	a7 95       	ror	r26
     ca6:	97 95       	ror	r25
     ca8:	87 95       	ror	r24
     caa:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     cac:	ec 85       	ldd	r30, Y+12	; 0x0c
     cae:	fd 85       	ldd	r31, Y+13	; 0x0d
     cb0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     cb2:	ee 85       	ldd	r30, Y+14	; 0x0e
     cb4:	ff 85       	ldd	r31, Y+15	; 0x0f
     cb6:	20 83       	st	Z, r18

  _written = false;
     cb8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     cba:	ec 89       	ldd	r30, Y+20	; 0x14
     cbc:	fd 89       	ldd	r31, Y+21	; 0x15
     cbe:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     cc0:	ea 89       	ldd	r30, Y+18	; 0x12
     cc2:	fb 89       	ldd	r31, Y+19	; 0x13
     cc4:	80 81       	ld	r24, Z
     cc6:	80 61       	ori	r24, 0x10	; 16
     cc8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     cca:	ea 89       	ldd	r30, Y+18	; 0x12
     ccc:	fb 89       	ldd	r31, Y+19	; 0x13
     cce:	80 81       	ld	r24, Z
     cd0:	88 60       	ori	r24, 0x08	; 8
     cd2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     cd4:	ea 89       	ldd	r30, Y+18	; 0x12
     cd6:	fb 89       	ldd	r31, Y+19	; 0x13
     cd8:	80 81       	ld	r24, Z
     cda:	80 68       	ori	r24, 0x80	; 128
     cdc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     cde:	ea 89       	ldd	r30, Y+18	; 0x12
     ce0:	fb 89       	ldd	r31, Y+19	; 0x13
     ce2:	80 81       	ld	r24, Z
     ce4:	8f 7d       	andi	r24, 0xDF	; 223
     ce6:	80 83       	st	Z, r24
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	08 95       	ret

00000cf8 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     cf8:	1f 92       	push	r1
     cfa:	0f 92       	push	r0
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	0f 92       	push	r0
     d00:	11 24       	eor	r1, r1
     d02:	0b b6       	in	r0, 0x3b	; 59
     d04:	0f 92       	push	r0
     d06:	2f 93       	push	r18
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	ef 93       	push	r30
     d0e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     d10:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <Serial+0x10>
     d14:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <Serial+0x11>
     d18:	80 81       	ld	r24, Z
     d1a:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <Serial+0x16>
     d1e:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <Serial+0x17>
     d22:	82 fd       	sbrc	r24, 2
     d24:	12 c0       	rjmp	.+36     	; 0xd4a <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     d26:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     d28:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <Serial+0x19>
     d2c:	8f 5f       	subi	r24, 0xFF	; 255
     d2e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     d30:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <Serial+0x1a>
     d34:	82 17       	cp	r24, r18
     d36:	51 f0       	breq	.+20     	; 0xd4c <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     d38:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <Serial+0x19>
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	e0 53       	subi	r30, 0x30	; 48
     d40:	fd 4f       	sbci	r31, 0xFD	; 253
     d42:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     d44:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <Serial+0x19>
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     d4a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	9f 91       	pop	r25
     d52:	8f 91       	pop	r24
     d54:	2f 91       	pop	r18
     d56:	0f 90       	pop	r0
     d58:	0b be       	out	0x3b, r0	; 59
     d5a:	0f 90       	pop	r0
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	0f 90       	pop	r0
     d60:	1f 90       	pop	r1
     d62:	18 95       	reti

00000d64 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	0b b6       	in	r0, 0x3b	; 59
     d70:	0f 92       	push	r0
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     d8a:	80 ed       	ldi	r24, 0xD0	; 208
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	c2 de       	rcall	.-636    	; 0xb14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0b be       	out	0x3b, r0	; 59
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     db6:	80 ed       	ldi	r24, 0xD0	; 208
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	34 de       	rcall	.-920    	; 0xa24 <_ZN14HardwareSerial9availableEv>
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	89 2b       	or	r24, r25
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <_Z17Serial0_availablev+0xe>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
}
     dc4:	82 2f       	mov	r24, r18
     dc6:	08 95       	ret

00000dc8 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     dc8:	e0 ed       	ldi	r30, 0xD0	; 208
     dca:	f2 e0       	ldi	r31, 0x02	; 2
     dcc:	13 82       	std	Z+3, r1	; 0x03
     dce:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     dd0:	88 ee       	ldi	r24, 0xE8	; 232
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	84 83       	std	Z+4, r24	; 0x04
     dda:	95 83       	std	Z+5, r25	; 0x05
     ddc:	a6 83       	std	Z+6, r26	; 0x06
     dde:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     de0:	81 e7       	ldi	r24, 0x71	; 113
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	80 83       	st	Z, r24
     de8:	85 ec       	ldi	r24, 0xC5	; 197
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	95 87       	std	Z+13, r25	; 0x0d
     dee:	84 87       	std	Z+12, r24	; 0x0c
     df0:	84 ec       	ldi	r24, 0xC4	; 196
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	97 87       	std	Z+15, r25	; 0x0f
     df6:	86 87       	std	Z+14, r24	; 0x0e
     df8:	80 ec       	ldi	r24, 0xC0	; 192
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	91 8b       	std	Z+17, r25	; 0x11
     dfe:	80 8b       	std	Z+16, r24	; 0x10
     e00:	81 ec       	ldi	r24, 0xC1	; 193
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	93 8b       	std	Z+19, r25	; 0x13
     e06:	82 8b       	std	Z+18, r24	; 0x12
     e08:	82 ec       	ldi	r24, 0xC2	; 194
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	95 8b       	std	Z+21, r25	; 0x15
     e0e:	84 8b       	std	Z+20, r24	; 0x14
     e10:	86 ec       	ldi	r24, 0xC6	; 198
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	97 8b       	std	Z+23, r25	; 0x17
     e16:	86 8b       	std	Z+22, r24	; 0x16
     e18:	11 8e       	std	Z+25, r1	; 0x19
     e1a:	12 8e       	std	Z+26, r1	; 0x1a
     e1c:	13 8e       	std	Z+27, r1	; 0x1b
     e1e:	14 8e       	std	Z+28, r1	; 0x1c
     e20:	08 95       	ret

00000e22 <initVariant>:
     e22:	08 95       	ret

00000e24 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     e24:	a5 d0       	rcall	.+330    	; 0xf70 <init>

	initVariant();
     e26:	fd df       	rcall	.-6      	; 0xe22 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e28:	4b da       	rcall	.-2922   	; 0x2c0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e2a:	cf e4       	ldi	r28, 0x4F	; 79
     e2c:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     e2e:	74 db       	rcall	.-2328   	; 0x518 <loop>
		if (serialEventRun) serialEventRun();
     e30:	20 97       	sbiw	r28, 0x00	; 0
     e32:	e9 f3       	breq	.-6      	; 0xe2e <main+0xa>
     e34:	34 de       	rcall	.-920    	; 0xa9e <_Z14serialEventRunv>
     e36:	fb cf       	rjmp	.-10     	; 0xe2e <main+0xa>

00000e38 <_ZN5Print5writeEPKhj>:
     e38:	cf 92       	push	r12
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	6c 01       	movw	r12, r24
     e4a:	7a 01       	movw	r14, r20
     e4c:	8b 01       	movw	r16, r22
     e4e:	c0 e0       	ldi	r28, 0x00	; 0
     e50:	d0 e0       	ldi	r29, 0x00	; 0
     e52:	ce 15       	cp	r28, r14
     e54:	df 05       	cpc	r29, r15
     e56:	81 f0       	breq	.+32     	; 0xe78 <_ZN5Print5writeEPKhj+0x40>
     e58:	d8 01       	movw	r26, r16
     e5a:	6d 91       	ld	r22, X+
     e5c:	8d 01       	movw	r16, r26
     e5e:	d6 01       	movw	r26, r12
     e60:	ed 91       	ld	r30, X+
     e62:	fc 91       	ld	r31, X
     e64:	01 90       	ld	r0, Z+
     e66:	f0 81       	ld	r31, Z
     e68:	e0 2d       	mov	r30, r0
     e6a:	c6 01       	movw	r24, r12
     e6c:	19 95       	eicall
     e6e:	89 2b       	or	r24, r25
     e70:	11 f0       	breq	.+4      	; 0xe76 <_ZN5Print5writeEPKhj+0x3e>
     e72:	21 96       	adiw	r28, 0x01	; 1
     e74:	ee cf       	rjmp	.-36     	; 0xe52 <_ZN5Print5writeEPKhj+0x1a>
     e76:	7e 01       	movw	r14, r28
     e78:	c7 01       	movw	r24, r14
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	08 95       	ret

00000e8c <_ZN5Print5writeEPKc>:
     e8c:	61 15       	cp	r22, r1
     e8e:	71 05       	cpc	r23, r1
     e90:	79 f0       	breq	.+30     	; 0xeb0 <_ZN5Print5writeEPKc+0x24>
     e92:	fb 01       	movw	r30, r22
     e94:	01 90       	ld	r0, Z+
     e96:	00 20       	and	r0, r0
     e98:	e9 f7       	brne	.-6      	; 0xe94 <_ZN5Print5writeEPKc+0x8>
     e9a:	31 97       	sbiw	r30, 0x01	; 1
     e9c:	af 01       	movw	r20, r30
     e9e:	46 1b       	sub	r20, r22
     ea0:	57 0b       	sbc	r21, r23
     ea2:	dc 01       	movw	r26, r24
     ea4:	ed 91       	ld	r30, X+
     ea6:	fc 91       	ld	r31, X
     ea8:	02 80       	ldd	r0, Z+2	; 0x02
     eaa:	f3 81       	ldd	r31, Z+3	; 0x03
     eac:	e0 2d       	mov	r30, r0
     eae:	19 94       	eijmp
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	08 95       	ret

00000eb6 <_ZN5Print7printlnEv>:
     eb6:	6f e7       	ldi	r22, 0x7F	; 127
     eb8:	72 e0       	ldi	r23, 0x02	; 2
     eba:	e8 cf       	rjmp	.-48     	; 0xe8c <_ZN5Print5writeEPKc>

00000ebc <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     ec6:	e2 df       	rcall	.-60     	; 0xe8c <_ZN5Print5writeEPKc>
     ec8:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     eca:	ce 01       	movw	r24, r28
     ecc:	f4 df       	rcall	.-24     	; 0xeb6 <_ZN5Print7printlnEv>
  return n;
}
     ece:	80 0f       	add	r24, r16
     ed0:	91 1f       	adc	r25, r17
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	08 95       	ret

00000edc <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	2f 93       	push	r18
     ee8:	3f 93       	push	r19
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <timer0_millis>
     ef6:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <timer0_millis+0x1>
     efa:	a0 91 70 03 	lds	r26, 0x0370	; 0x800370 <timer0_millis+0x2>
     efe:	b0 91 71 03 	lds	r27, 0x0371	; 0x800371 <timer0_millis+0x3>
     f02:	30 91 6d 03 	lds	r19, 0x036D	; 0x80036d <timer0_fract>
     f06:	23 e0       	ldi	r18, 0x03	; 3
     f08:	23 0f       	add	r18, r19
     f0a:	2d 37       	cpi	r18, 0x7D	; 125
     f0c:	20 f4       	brcc	.+8      	; 0xf16 <__vector_23+0x3a>
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	a1 1d       	adc	r26, r1
     f12:	b1 1d       	adc	r27, r1
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <__vector_23+0x44>
     f16:	26 e8       	ldi	r18, 0x86	; 134
     f18:	23 0f       	add	r18, r19
     f1a:	02 96       	adiw	r24, 0x02	; 2
     f1c:	a1 1d       	adc	r26, r1
     f1e:	b1 1d       	adc	r27, r1
     f20:	20 93 6d 03 	sts	0x036D, r18	; 0x80036d <timer0_fract>
     f24:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <timer0_millis>
     f28:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <timer0_millis+0x1>
     f2c:	a0 93 70 03 	sts	0x0370, r26	; 0x800370 <timer0_millis+0x2>
     f30:	b0 93 71 03 	sts	0x0371, r27	; 0x800371 <timer0_millis+0x3>
     f34:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <timer0_overflow_count>
     f38:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <timer0_overflow_count+0x1>
     f3c:	a0 91 74 03 	lds	r26, 0x0374	; 0x800374 <timer0_overflow_count+0x2>
     f40:	b0 91 75 03 	lds	r27, 0x0375	; 0x800375 <timer0_overflow_count+0x3>
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	a1 1d       	adc	r26, r1
     f48:	b1 1d       	adc	r27, r1
     f4a:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <timer0_overflow_count>
     f4e:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <timer0_overflow_count+0x1>
     f52:	a0 93 74 03 	sts	0x0374, r26	; 0x800374 <timer0_overflow_count+0x2>
     f56:	b0 93 75 03 	sts	0x0375, r27	; 0x800375 <timer0_overflow_count+0x3>
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f70:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f72:	84 b5       	in	r24, 0x24	; 36
     f74:	82 60       	ori	r24, 0x02	; 2
     f76:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f78:	84 b5       	in	r24, 0x24	; 36
     f7a:	81 60       	ori	r24, 0x01	; 1
     f7c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f7e:	85 b5       	in	r24, 0x25	; 37
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f84:	85 b5       	in	r24, 0x25	; 37
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f8a:	ee e6       	ldi	r30, 0x6E	; 110
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f94:	e1 e8       	ldi	r30, 0x81	; 129
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f9a:	80 81       	ld	r24, Z
     f9c:	82 60       	ori	r24, 0x02	; 2
     f9e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     fa0:	80 81       	ld	r24, Z
     fa2:	81 60       	ori	r24, 0x01	; 1
     fa4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     fa6:	e0 e8       	ldi	r30, 0x80	; 128
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     fb0:	e1 eb       	ldi	r30, 0xB1	; 177
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	84 60       	ori	r24, 0x04	; 4
     fb8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     fba:	e0 eb       	ldi	r30, 0xB0	; 176
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     fc4:	e1 e9       	ldi	r30, 0x91	; 145
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	82 60       	ori	r24, 0x02	; 2
     fcc:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     fce:	80 81       	ld	r24, Z
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     fd4:	e0 e9       	ldi	r30, 0x90	; 144
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     fde:	e1 ea       	ldi	r30, 0xA1	; 161
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	82 60       	ori	r24, 0x02	; 2
     fe6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     fe8:	80 81       	ld	r24, Z
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     fee:	e0 ea       	ldi	r30, 0xA0	; 160
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     ff8:	e1 e2       	ldi	r30, 0x21	; 33
     ffa:	f1 e0       	ldi	r31, 0x01	; 1
     ffc:	80 81       	ld	r24, Z
     ffe:	82 60       	ori	r24, 0x02	; 2
    1000:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1002:	80 81       	ld	r24, Z
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1008:	e0 e2       	ldi	r30, 0x20	; 32
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	80 81       	ld	r24, Z
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1012:	ea e7       	ldi	r30, 0x7A	; 122
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	84 60       	ori	r24, 0x04	; 4
    101a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    101c:	80 81       	ld	r24, Z
    101e:	82 60       	ori	r24, 0x02	; 2
    1020:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1022:	80 81       	ld	r24, Z
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1028:	80 81       	ld	r24, Z
    102a:	80 68       	ori	r24, 0x80	; 128
    102c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    102e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1032:	08 95       	ret

00001034 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    1034:	86 33       	cpi	r24, 0x36	; 54
    1036:	08 f0       	brcs	.+2      	; 0x103a <analogRead+0x6>
    1038:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    103a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    103e:	28 2f       	mov	r18, r24
    1040:	28 70       	andi	r18, 0x08	; 8
    1042:	97 7f       	andi	r25, 0xF7	; 247
    1044:	92 2b       	or	r25, r18
    1046:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    104a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <analog_reference>
    104e:	90 e4       	ldi	r25, 0x40	; 64
    1050:	29 9f       	mul	r18, r25
    1052:	90 01       	movw	r18, r0
    1054:	11 24       	eor	r1, r1
    1056:	87 70       	andi	r24, 0x07	; 7
    1058:	82 2b       	or	r24, r18
    105a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    105e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1062:	80 64       	ori	r24, 0x40	; 64
    1064:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1068:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    106c:	86 fd       	sbrc	r24, 6
    106e:	fc cf       	rjmp	.-8      	; 0x1068 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1070:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    1074:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1078:	90 e0       	ldi	r25, 0x00	; 0
}
    107a:	92 2b       	or	r25, r18
    107c:	08 95       	ret

0000107e <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	18 2f       	mov	r17, r24
    1086:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	14 d1       	rcall	.+552    	; 0x12b4 <pinMode>
	if (val == 0)
    108c:	20 97       	sbiw	r28, 0x00	; 0
    108e:	11 f4       	brne	.+4      	; 0x1094 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	04 c0       	rjmp	.+8      	; 0x109c <analogWrite+0x1e>
	}
	else if (val == 255)
    1094:	cf 3f       	cpi	r28, 0xFF	; 255
    1096:	d1 05       	cpc	r29, r1
    1098:	31 f4       	brne	.+12     	; 0x10a6 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    10a2:	1f 91       	pop	r17
    10a4:	43 c1       	rjmp	.+646    	; 0x132c <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    10a6:	e1 2f       	mov	r30, r17
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	e4 5d       	subi	r30, 0xD4	; 212
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	e4 91       	lpm	r30, Z
    10b0:	8e 2f       	mov	r24, r30
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	fc 01       	movw	r30, r24
    10b6:	31 97       	sbiw	r30, 0x01	; 1
    10b8:	e2 31       	cpi	r30, 0x12	; 18
    10ba:	f1 05       	cpc	r31, r1
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <analogWrite+0x42>
    10be:	9c c0       	rjmp	.+312    	; 0x11f8 <analogWrite+0x17a>
    10c0:	88 27       	eor	r24, r24
    10c2:	ee 58       	subi	r30, 0x8E	; 142
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	8f 4f       	sbci	r24, 0xFF	; 255
    10c8:	43 c4       	rjmp	.+2182   	; 0x1950 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    10ca:	84 b5       	in	r24, 0x24	; 36
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    10d0:	c7 bd       	out	0x27, r28	; 39
				break;
    10d2:	97 c0       	rjmp	.+302    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    10d4:	84 b5       	in	r24, 0x24	; 36
    10d6:	80 62       	ori	r24, 0x20	; 32
    10d8:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    10da:	c8 bd       	out	0x28, r28	; 40
				break;
    10dc:	92 c0       	rjmp	.+292    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    10de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10e2:	80 68       	ori	r24, 0x80	; 128
    10e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				OCR1A = val; // set pwm duty
    10e8:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    10ec:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
				break;
    10f0:	88 c0       	rjmp	.+272    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    10f2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10f6:	80 62       	ori	r24, 0x20	; 32
    10f8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				OCR1B = val; // set pwm duty
    10fc:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    1100:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
				break;
    1104:	7e c0       	rjmp	.+252    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				sbi(TCCR1A, COM1C1);
    1106:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    110a:	88 60       	ori	r24, 0x08	; 8
    110c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				OCR1C = val; // set pwm duty
    1110:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    1114:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
				break;
    1118:	74 c0       	rjmp	.+232    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    111a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    111e:	80 68       	ori	r24, 0x80	; 128
    1120:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
				OCR2A = val; // set pwm duty
    1124:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
				break;
    1128:	6c c0       	rjmp	.+216    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    112a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    112e:	80 62       	ori	r24, 0x20	; 32
    1130:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
				OCR2B = val; // set pwm duty
    1134:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
				break;
    1138:	64 c0       	rjmp	.+200    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    113a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    113e:	80 68       	ori	r24, 0x80	; 128
    1140:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				OCR3A = val; // set pwm duty
    1144:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1148:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
				break;
    114c:	5a c0       	rjmp	.+180    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    114e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1152:	80 62       	ori	r24, 0x20	; 32
    1154:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				OCR3B = val; // set pwm duty
    1158:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    115c:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
				break;
    1160:	50 c0       	rjmp	.+160    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    1162:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1166:	88 60       	ori	r24, 0x08	; 8
    1168:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				OCR3C = val; // set pwm duty
    116c:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    1170:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
				break;
    1174:	46 c0       	rjmp	.+140    	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    1176:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    117a:	80 68       	ori	r24, 0x80	; 128
    117c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    1180:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1184:	8f 7b       	andi	r24, 0xBF	; 191
    1186:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				#endif
				OCR4A = val;	// set pwm duty
    118a:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    118e:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
				break;
    1192:	37 c0       	rjmp	.+110    	; 0x1202 <analogWrite+0x184>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    1194:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1198:	80 62       	ori	r24, 0x20	; 32
    119a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				OCR4B = val; // set pwm duty
    119e:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    11a2:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
				break;
    11a6:	2d c0       	rjmp	.+90     	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    11a8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				OCR4C = val; // set pwm duty
    11b2:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
    11b6:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
				break;
    11ba:	23 c0       	rjmp	.+70     	; 0x1202 <analogWrite+0x184>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    11bc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11c0:	80 68       	ori	r24, 0x80	; 128
    11c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				OCR5A = val; // set pwm duty
    11c6:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    11ca:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
				break;
    11ce:	19 c0       	rjmp	.+50     	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    11d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11d4:	80 62       	ori	r24, 0x20	; 32
    11d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				OCR5B = val; // set pwm duty
    11da:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    11de:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
				break;
    11e2:	0f c0       	rjmp	.+30     	; 0x1202 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    11e4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11e8:	88 60       	ori	r24, 0x08	; 8
    11ea:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				OCR5C = val; // set pwm duty
    11ee:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    11f2:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
				break;
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <analogWrite+0x184>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    11f8:	c0 38       	cpi	r28, 0x80	; 128
    11fa:	d1 05       	cpc	r29, r1
    11fc:	0c f0       	brlt	.+2      	; 0x1200 <analogWrite+0x182>
    11fe:	4d cf       	rjmp	.-358    	; 0x109a <analogWrite+0x1c>
    1200:	47 cf       	rjmp	.-370    	; 0x1090 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	08 95       	ret

0000120a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	fc 01       	movw	r30, r24
    120e:	31 97       	sbiw	r30, 0x01	; 1
    1210:	e2 31       	cpi	r30, 0x12	; 18
    1212:	f1 05       	cpc	r31, r1
    1214:	08 f0       	brcs	.+2      	; 0x1218 <turnOffPWM+0xe>
    1216:	4d c0       	rjmp	.+154    	; 0x12b2 <turnOffPWM+0xa8>
    1218:	88 27       	eor	r24, r24
    121a:	ec 57       	subi	r30, 0x7C	; 124
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	97 c3       	rjmp	.+1838   	; 0x1950 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1222:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1226:	8f 77       	andi	r24, 0x7F	; 127
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    122a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    122e:	8f 7d       	andi	r24, 0xDF	; 223
    1230:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1234:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1236:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    123a:	87 7f       	andi	r24, 0xF7	; 247
    123c:	f9 cf       	rjmp	.-14     	; 0x1230 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    123e:	84 b5       	in	r24, 0x24	; 36
    1240:	8f 77       	andi	r24, 0x7F	; 127
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1244:	84 b5       	in	r24, 0x24	; 36
    1246:	8f 7d       	andi	r24, 0xDF	; 223
    1248:	84 bd       	out	0x24, r24	; 36
    124a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    124c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1250:	8f 77       	andi	r24, 0x7F	; 127
    1252:	03 c0       	rjmp	.+6      	; 0x125a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1254:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1258:	8f 7d       	andi	r24, 0xDF	; 223
    125a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    125e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1260:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1264:	8f 77       	andi	r24, 0x7F	; 127
    1266:	07 c0       	rjmp	.+14     	; 0x1276 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1268:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    126c:	8f 7d       	andi	r24, 0xDF	; 223
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1270:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1274:	87 7f       	andi	r24, 0xF7	; 247
    1276:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    127a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    127c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1280:	8f 77       	andi	r24, 0x7F	; 127
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1284:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1288:	8f 7d       	andi	r24, 0xDF	; 223
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    128c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1290:	87 7f       	andi	r24, 0xF7	; 247
    1292:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1296:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1298:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    129c:	8f 77       	andi	r24, 0x7F	; 127
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    12a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    12a4:	8f 7d       	andi	r24, 0xDF	; 223
    12a6:	03 c0       	rjmp	.+6      	; 0x12ae <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    12a8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    12ac:	87 7f       	andi	r24, 0xF7	; 247
    12ae:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    12b2:	08 95       	ret

000012b4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	fc 01       	movw	r30, r24
    12bc:	ee 58       	subi	r30, 0x8E	; 142
    12be:	fe 4f       	sbci	r31, 0xFE	; 254
    12c0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    12c2:	fc 01       	movw	r30, r24
    12c4:	e8 54       	subi	r30, 0x48	; 72
    12c6:	fe 4f       	sbci	r31, 0xFE	; 254
    12c8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    12ca:	88 23       	and	r24, r24
    12cc:	61 f1       	breq	.+88     	; 0x1326 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	fc 01       	movw	r30, r24
    12d6:	e8 5e       	subi	r30, 0xE8	; 232
    12d8:	fd 4f       	sbci	r31, 0xFD	; 253
    12da:	c5 91       	lpm	r28, Z+
    12dc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    12de:	fc 01       	movw	r30, r24
    12e0:	e2 50       	subi	r30, 0x02	; 2
    12e2:	fe 4f       	sbci	r31, 0xFE	; 254
    12e4:	a5 91       	lpm	r26, Z+
    12e6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    12e8:	61 11       	cpse	r22, r1
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    12ec:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12ee:	f8 94       	cli
		*reg &= ~bit;
    12f0:	88 81       	ld	r24, Y
    12f2:	20 95       	com	r18
    12f4:	82 23       	and	r24, r18
    12f6:	88 83       	st	Y, r24
		*out &= ~bit;
    12f8:	ec 91       	ld	r30, X
    12fa:	2e 23       	and	r18, r30
    12fc:	0b c0       	rjmp	.+22     	; 0x1314 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    12fe:	62 30       	cpi	r22, 0x02	; 2
    1300:	61 f4       	brne	.+24     	; 0x131a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1302:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1304:	f8 94       	cli
		*reg &= ~bit;
    1306:	88 81       	ld	r24, Y
    1308:	32 2f       	mov	r19, r18
    130a:	30 95       	com	r19
    130c:	83 23       	and	r24, r19
    130e:	88 83       	st	Y, r24
		*out |= bit;
    1310:	ec 91       	ld	r30, X
    1312:	2e 2b       	or	r18, r30
    1314:	2c 93       	st	X, r18
		SREG = oldSREG;
    1316:	9f bf       	out	0x3f, r25	; 63
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    131a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    131c:	f8 94       	cli
		*reg |= bit;
    131e:	e8 81       	ld	r30, Y
    1320:	2e 2b       	or	r18, r30
    1322:	28 83       	st	Y, r18
		SREG = oldSREG;
    1324:	8f bf       	out	0x3f, r24	; 63
	}
}
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	f9 01       	movw	r30, r18
    1338:	e4 5d       	subi	r30, 0xD4	; 212
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    133e:	f9 01       	movw	r30, r18
    1340:	ee 58       	subi	r30, 0x8E	; 142
    1342:	fe 4f       	sbci	r31, 0xFE	; 254
    1344:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1346:	f9 01       	movw	r30, r18
    1348:	e8 54       	subi	r30, 0x48	; 72
    134a:	fe 4f       	sbci	r31, 0xFE	; 254
    134c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    134e:	cc 23       	and	r28, r28
    1350:	b9 f0       	breq	.+46     	; 0x1380 <digitalWrite+0x54>
    1352:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1354:	81 11       	cpse	r24, r1
    1356:	59 df       	rcall	.-334    	; 0x120a <turnOffPWM>

	out = portOutputRegister(port);
    1358:	ec 2f       	mov	r30, r28
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	e2 50       	subi	r30, 0x02	; 2
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	a5 91       	lpm	r26, Z+
    1366:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1368:	9f b7       	in	r25, 0x3f	; 63
	cli();
    136a:	f8 94       	cli

	if (val == LOW) {
    136c:	11 11       	cpse	r17, r1
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <digitalWrite+0x4c>
		*out &= ~bit;
    1370:	8c 91       	ld	r24, X
    1372:	d0 95       	com	r29
    1374:	d8 23       	and	r29, r24
    1376:	02 c0       	rjmp	.+4      	; 0x137c <digitalWrite+0x50>
	} else {
		*out |= bit;
    1378:	ec 91       	ld	r30, X
    137a:	de 2b       	or	r29, r30
    137c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    137e:	9f bf       	out	0x3f, r25	; 63
}
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	08 95       	ret

00001388 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    1388:	fc 01       	movw	r30, r24
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	09 f0       	breq	.+2      	; 0x1394 <_ZN6StringD1Ev+0xc>
    1392:	7e c3       	rjmp	.+1788   	; 0x1a90 <free>
    1394:	08 95       	ret

00001396 <_ZN6String10invalidateEv>:
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	ec 01       	movw	r28, r24
    139c:	88 81       	ld	r24, Y
    139e:	99 81       	ldd	r25, Y+1	; 0x01
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <_ZN6String10invalidateEv+0x10>
    13a4:	75 d3       	rcall	.+1770   	; 0x1a90 <free>
    13a6:	19 82       	std	Y+1, r1	; 0x01
    13a8:	18 82       	st	Y, r1
    13aa:	1d 82       	std	Y+5, r1	; 0x05
    13ac:	1c 82       	std	Y+4, r1	; 0x04
    13ae:	1b 82       	std	Y+3, r1	; 0x03
    13b0:	1a 82       	std	Y+2, r1	; 0x02
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <_ZN6String12changeBufferEj>:
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	ec 01       	movw	r28, r24
    13c2:	8b 01       	movw	r16, r22
    13c4:	6f 5f       	subi	r22, 0xFF	; 255
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	88 81       	ld	r24, Y
    13ca:	99 81       	ldd	r25, Y+1	; 0x01
    13cc:	ea d3       	rcall	.+2004   	; 0x1ba2 <realloc>
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	31 f0       	breq	.+12     	; 0x13de <_ZN6String12changeBufferEj+0x26>
    13d2:	99 83       	std	Y+1, r25	; 0x01
    13d4:	88 83       	st	Y, r24
    13d6:	1b 83       	std	Y+3, r17	; 0x03
    13d8:	0a 83       	std	Y+2, r16	; 0x02
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <_ZN6String12changeBufferEj+0x28>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <_ZN6String7reserveEj>:
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
    13f0:	88 81       	ld	r24, Y
    13f2:	99 81       	ldd	r25, Y+1	; 0x01
    13f4:	89 2b       	or	r24, r25
    13f6:	29 f0       	breq	.+10     	; 0x1402 <_ZN6String7reserveEj+0x18>
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	9b 81       	ldd	r25, Y+3	; 0x03
    13fc:	86 17       	cp	r24, r22
    13fe:	97 07       	cpc	r25, r23
    1400:	58 f4       	brcc	.+22     	; 0x1418 <_ZN6String7reserveEj+0x2e>
    1402:	ce 01       	movw	r24, r28
    1404:	d9 df       	rcall	.-78     	; 0x13b8 <_ZN6String12changeBufferEj>
    1406:	88 23       	and	r24, r24
    1408:	41 f0       	breq	.+16     	; 0x141a <_ZN6String7reserveEj+0x30>
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	89 2b       	or	r24, r25
    1410:	19 f4       	brne	.+6      	; 0x1418 <_ZN6String7reserveEj+0x2e>
    1412:	e8 81       	ld	r30, Y
    1414:	f9 81       	ldd	r31, Y+1	; 0x01
    1416:	10 82       	st	Z, r1
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <_ZN6String4copyEPKcj>:
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	ec 01       	movw	r28, r24
    142e:	7b 01       	movw	r14, r22
    1430:	8a 01       	movw	r16, r20
    1432:	ba 01       	movw	r22, r20
    1434:	da df       	rcall	.-76     	; 0x13ea <_ZN6String7reserveEj>
    1436:	81 11       	cpse	r24, r1
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <_ZN6String4copyEPKcj+0x20>
    143a:	ce 01       	movw	r24, r28
    143c:	ac df       	rcall	.-168    	; 0x1396 <_ZN6String10invalidateEv>
    143e:	06 c0       	rjmp	.+12     	; 0x144c <_ZN6String4copyEPKcj+0x2c>
    1440:	1d 83       	std	Y+5, r17	; 0x05
    1442:	0c 83       	std	Y+4, r16	; 0x04
    1444:	b7 01       	movw	r22, r14
    1446:	88 81       	ld	r24, Y
    1448:	99 81       	ldd	r25, Y+1	; 0x01
    144a:	dc d4       	rcall	.+2488   	; 0x1e04 <strcpy>
    144c:	ce 01       	movw	r24, r28
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	08 95       	ret

0000145c <_ZN6StringC1EPKc>:
    145c:	fc 01       	movw	r30, r24
    145e:	11 82       	std	Z+1, r1	; 0x01
    1460:	10 82       	st	Z, r1
    1462:	13 82       	std	Z+3, r1	; 0x03
    1464:	12 82       	std	Z+2, r1	; 0x02
    1466:	15 82       	std	Z+5, r1	; 0x05
    1468:	14 82       	std	Z+4, r1	; 0x04
    146a:	61 15       	cp	r22, r1
    146c:	71 05       	cpc	r23, r1
    146e:	49 f0       	breq	.+18     	; 0x1482 <_ZN6StringC1EPKc+0x26>
    1470:	fb 01       	movw	r30, r22
    1472:	01 90       	ld	r0, Z+
    1474:	00 20       	and	r0, r0
    1476:	e9 f7       	brne	.-6      	; 0x1472 <_ZN6StringC1EPKc+0x16>
    1478:	31 97       	sbiw	r30, 0x01	; 1
    147a:	af 01       	movw	r20, r30
    147c:	46 1b       	sub	r20, r22
    147e:	57 0b       	sbc	r21, r23
    1480:	cf cf       	rjmp	.-98     	; 0x1420 <_ZN6String4copyEPKcj>
    1482:	08 95       	ret

00001484 <_ZN6StringaSEPKc>:
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
    148a:	61 15       	cp	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	51 f0       	breq	.+20     	; 0x14a4 <_ZN6StringaSEPKc+0x20>
    1490:	fb 01       	movw	r30, r22
    1492:	01 90       	ld	r0, Z+
    1494:	00 20       	and	r0, r0
    1496:	e9 f7       	brne	.-6      	; 0x1492 <_ZN6StringaSEPKc+0xe>
    1498:	31 97       	sbiw	r30, 0x01	; 1
    149a:	af 01       	movw	r20, r30
    149c:	46 1b       	sub	r20, r22
    149e:	57 0b       	sbc	r21, r23
    14a0:	bf df       	rcall	.-130    	; 0x1420 <_ZN6String4copyEPKcj>
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <_ZN6StringaSEPKc+0x22>
    14a4:	78 df       	rcall	.-272    	; 0x1396 <_ZN6String10invalidateEv>
    14a6:	ce 01       	movw	r24, r28
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <_ZN6String6concatEPKcj>:
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	61 15       	cp	r22, r1
    14bc:	71 05       	cpc	r23, r1
    14be:	11 f4       	brne	.+4      	; 0x14c4 <_ZN6String6concatEPKcj+0x16>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	1a c0       	rjmp	.+52     	; 0x14f8 <_ZN6String6concatEPKcj+0x4a>
    14c4:	41 15       	cp	r20, r1
    14c6:	51 05       	cpc	r21, r1
    14c8:	b1 f0       	breq	.+44     	; 0x14f6 <_ZN6String6concatEPKcj+0x48>
    14ca:	7b 01       	movw	r14, r22
    14cc:	ec 01       	movw	r28, r24
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	8a 01       	movw	r16, r20
    14d4:	08 0f       	add	r16, r24
    14d6:	19 1f       	adc	r17, r25
    14d8:	b8 01       	movw	r22, r16
    14da:	ce 01       	movw	r24, r28
    14dc:	86 df       	rcall	.-244    	; 0x13ea <_ZN6String7reserveEj>
    14de:	88 23       	and	r24, r24
    14e0:	79 f3       	breq	.-34     	; 0x14c0 <_ZN6String6concatEPKcj+0x12>
    14e2:	28 81       	ld	r18, Y
    14e4:	39 81       	ldd	r19, Y+1	; 0x01
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	b7 01       	movw	r22, r14
    14ec:	82 0f       	add	r24, r18
    14ee:	93 1f       	adc	r25, r19
    14f0:	89 d4       	rcall	.+2322   	; 0x1e04 <strcpy>
    14f2:	1d 83       	std	Y+5, r17	; 0x05
    14f4:	0c 83       	std	Y+4, r16	; 0x04
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	08 95       	ret

00001506 <_ZN6String6concatEc>:
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	1f 92       	push	r1
    150c:	1f 92       	push	r1
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	69 83       	std	Y+1, r22	; 0x01
    1514:	1a 82       	std	Y+2, r1	; 0x02
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	be 01       	movw	r22, r28
    151c:	6f 5f       	subi	r22, 0xFF	; 255
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	c6 df       	rcall	.-116    	; 0x14ae <_ZN6String6concatEPKcj>
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <_ZNK6String6equalsEPKc>:
    152c:	fc 01       	movw	r30, r24
    152e:	24 81       	ldd	r18, Z+4	; 0x04
    1530:	35 81       	ldd	r19, Z+5	; 0x05
    1532:	23 2b       	or	r18, r19
    1534:	31 f4       	brne	.+12     	; 0x1542 <_ZNK6String6equalsEPKc+0x16>
    1536:	21 e0       	ldi	r18, 0x01	; 1
    1538:	61 15       	cp	r22, r1
    153a:	71 05       	cpc	r23, r1
    153c:	99 f0       	breq	.+38     	; 0x1564 <_ZNK6String6equalsEPKc+0x38>
    153e:	fb 01       	movw	r30, r22
    1540:	08 c0       	rjmp	.+16     	; 0x1552 <_ZNK6String6equalsEPKc+0x26>
    1542:	fc 01       	movw	r30, r24
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	61 15       	cp	r22, r1
    154a:	71 05       	cpc	r23, r1
    154c:	31 f4       	brne	.+12     	; 0x155a <_ZNK6String6equalsEPKc+0x2e>
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	fc 01       	movw	r30, r24
    1552:	80 81       	ld	r24, Z
    1554:	88 23       	and	r24, r24
    1556:	31 f0       	breq	.+12     	; 0x1564 <_ZNK6String6equalsEPKc+0x38>
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <_ZNK6String6equalsEPKc+0x36>
    155a:	4b d4       	rcall	.+2198   	; 0x1df2 <strcmp>
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	89 2b       	or	r24, r25
    1560:	09 f0       	breq	.+2      	; 0x1564 <_ZNK6String6equalsEPKc+0x38>
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	82 2f       	mov	r24, r18
    1566:	08 95       	ret

00001568 <_ZNK6String10startsWithERKS_j>:
    1568:	db 01       	movw	r26, r22
    156a:	14 96       	adiw	r26, 0x04	; 4
    156c:	ed 91       	ld	r30, X+
    156e:	fc 91       	ld	r31, X
    1570:	15 97       	sbiw	r26, 0x05	; 5
    1572:	dc 01       	movw	r26, r24
    1574:	14 96       	adiw	r26, 0x04	; 4
    1576:	2d 91       	ld	r18, X+
    1578:	3c 91       	ld	r19, X
    157a:	15 97       	sbiw	r26, 0x05	; 5
    157c:	2e 1b       	sub	r18, r30
    157e:	3f 0b       	sbc	r19, r31
    1580:	24 17       	cp	r18, r20
    1582:	35 07       	cpc	r19, r21
    1584:	98 f0       	brcs	.+38     	; 0x15ac <_ZNK6String10startsWithERKS_j+0x44>
    1586:	2d 91       	ld	r18, X+
    1588:	3c 91       	ld	r19, X
    158a:	21 15       	cp	r18, r1
    158c:	31 05       	cpc	r19, r1
    158e:	71 f0       	breq	.+28     	; 0x15ac <_ZNK6String10startsWithERKS_j+0x44>
    1590:	db 01       	movw	r26, r22
    1592:	6d 91       	ld	r22, X+
    1594:	7c 91       	ld	r23, X
    1596:	61 15       	cp	r22, r1
    1598:	71 05       	cpc	r23, r1
    159a:	41 f0       	breq	.+16     	; 0x15ac <_ZNK6String10startsWithERKS_j+0x44>
    159c:	ca 01       	movw	r24, r20
    159e:	af 01       	movw	r20, r30
    15a0:	82 0f       	add	r24, r18
    15a2:	93 1f       	adc	r25, r19
    15a4:	36 d4       	rcall	.+2156   	; 0x1e12 <strncmp>
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    15a8:	89 2b       	or	r24, r25
    15aa:	09 f0       	breq	.+2      	; 0x15ae <_ZNK6String10startsWithERKS_j+0x46>
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	82 2f       	mov	r24, r18
    15b0:	08 95       	ret

000015b2 <_ZNK6String10startsWithERKS_>:
    15b2:	fc 01       	movw	r30, r24
    15b4:	44 81       	ldd	r20, Z+4	; 0x04
    15b6:	55 81       	ldd	r21, Z+5	; 0x05
    15b8:	fb 01       	movw	r30, r22
    15ba:	24 81       	ldd	r18, Z+4	; 0x04
    15bc:	35 81       	ldd	r19, Z+5	; 0x05
    15be:	42 17       	cp	r20, r18
    15c0:	53 07       	cpc	r21, r19
    15c2:	18 f0       	brcs	.+6      	; 0x15ca <_ZNK6String10startsWithERKS_+0x18>
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	cf cf       	rjmp	.-98     	; 0x1568 <_ZNK6String10startsWithERKS_j>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	08 95       	ret

000015ce <_ZNK6String11lastIndexOfERKS_j>:
    15ce:	af 92       	push	r10
    15d0:	bf 92       	push	r11
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	7b 01       	movw	r14, r22
    15e4:	8a 01       	movw	r16, r20
    15e6:	fb 01       	movw	r30, r22
    15e8:	44 81       	ldd	r20, Z+4	; 0x04
    15ea:	55 81       	ldd	r21, Z+5	; 0x05
    15ec:	41 15       	cp	r20, r1
    15ee:	51 05       	cpc	r21, r1
    15f0:	59 f1       	breq	.+86     	; 0x1648 <_ZNK6String11lastIndexOfERKS_j+0x7a>
    15f2:	fc 01       	movw	r30, r24
    15f4:	24 81       	ldd	r18, Z+4	; 0x04
    15f6:	35 81       	ldd	r19, Z+5	; 0x05
    15f8:	21 15       	cp	r18, r1
    15fa:	31 05       	cpc	r19, r1
    15fc:	29 f1       	breq	.+74     	; 0x1648 <_ZNK6String11lastIndexOfERKS_j+0x7a>
    15fe:	24 17       	cp	r18, r20
    1600:	35 07       	cpc	r19, r21
    1602:	10 f1       	brcs	.+68     	; 0x1648 <_ZNK6String11lastIndexOfERKS_j+0x7a>
    1604:	02 17       	cp	r16, r18
    1606:	13 07       	cpc	r17, r19
    1608:	18 f0       	brcs	.+6      	; 0x1610 <_ZNK6String11lastIndexOfERKS_j+0x42>
    160a:	89 01       	movw	r16, r18
    160c:	01 50       	subi	r16, 0x01	; 1
    160e:	11 09       	sbc	r17, r1
    1610:	fc 01       	movw	r30, r24
    1612:	a0 80       	ld	r10, Z
    1614:	b1 80       	ldd	r11, Z+1	; 0x01
    1616:	c5 01       	movw	r24, r10
    1618:	df ef       	ldi	r29, 0xFF	; 255
    161a:	cf ef       	ldi	r28, 0xFF	; 255
    161c:	65 01       	movw	r12, r10
    161e:	c0 0e       	add	r12, r16
    1620:	d1 1e       	adc	r13, r17
    1622:	c8 16       	cp	r12, r24
    1624:	d9 06       	cpc	r13, r25
    1626:	98 f0       	brcs	.+38     	; 0x164e <_ZNK6String11lastIndexOfERKS_j+0x80>
    1628:	f7 01       	movw	r30, r14
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	ff d3       	rcall	.+2046   	; 0x1e2e <strstr>
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f0       	breq	.+26     	; 0x164e <_ZNK6String11lastIndexOfERKS_j+0x80>
    1634:	9c 01       	movw	r18, r24
    1636:	2a 19       	sub	r18, r10
    1638:	3b 09       	sbc	r19, r11
    163a:	02 17       	cp	r16, r18
    163c:	13 07       	cpc	r17, r19
    163e:	10 f0       	brcs	.+4      	; 0x1644 <_ZNK6String11lastIndexOfERKS_j+0x76>
    1640:	d2 2f       	mov	r29, r18
    1642:	c3 2f       	mov	r28, r19
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	ed cf       	rjmp	.-38     	; 0x1622 <_ZNK6String11lastIndexOfERKS_j+0x54>
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	9f ef       	ldi	r25, 0xFF	; 255
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <_ZNK6String11lastIndexOfERKS_j+0x84>
    164e:	8d 2f       	mov	r24, r29
    1650:	9c 2f       	mov	r25, r28
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	08 95       	ret

00001668 <_ZN6String7replaceERKS_S1_>:
    1668:	2f 92       	push	r2
    166a:	3f 92       	push	r3
    166c:	4f 92       	push	r4
    166e:	5f 92       	push	r5
    1670:	6f 92       	push	r6
    1672:	7f 92       	push	r7
    1674:	8f 92       	push	r8
    1676:	9f 92       	push	r9
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	fc 01       	movw	r30, r24
    168e:	44 80       	ldd	r4, Z+4	; 0x04
    1690:	55 80       	ldd	r5, Z+5	; 0x05
    1692:	41 14       	cp	r4, r1
    1694:	51 04       	cpc	r5, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <_ZN6String7replaceERKS_S1_+0x32>
    1698:	c3 c0       	rjmp	.+390    	; 0x1820 <_ZN6String7replaceERKS_S1_+0x1b8>
    169a:	fb 01       	movw	r30, r22
    169c:	84 80       	ldd	r8, Z+4	; 0x04
    169e:	95 80       	ldd	r9, Z+5	; 0x05
    16a0:	81 14       	cp	r8, r1
    16a2:	91 04       	cpc	r9, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <_ZN6String7replaceERKS_S1_+0x40>
    16a6:	bc c0       	rjmp	.+376    	; 0x1820 <_ZN6String7replaceERKS_S1_+0x1b8>
    16a8:	7a 01       	movw	r14, r20
    16aa:	6b 01       	movw	r12, r22
    16ac:	8c 01       	movw	r16, r24
    16ae:	fa 01       	movw	r30, r20
    16b0:	64 80       	ldd	r6, Z+4	; 0x04
    16b2:	75 80       	ldd	r7, Z+5	; 0x05
    16b4:	68 18       	sub	r6, r8
    16b6:	79 08       	sbc	r7, r9
    16b8:	fc 01       	movw	r30, r24
    16ba:	c0 81       	ld	r28, Z
    16bc:	d1 81       	ldd	r29, Z+1	; 0x01
    16be:	61 14       	cp	r6, r1
    16c0:	71 04       	cpc	r7, r1
    16c2:	a9 f4       	brne	.+42     	; 0x16ee <_ZN6String7replaceERKS_S1_+0x86>
    16c4:	f6 01       	movw	r30, r12
    16c6:	60 81       	ld	r22, Z
    16c8:	71 81       	ldd	r23, Z+1	; 0x01
    16ca:	ce 01       	movw	r24, r28
    16cc:	b0 d3       	rcall	.+1888   	; 0x1e2e <strstr>
    16ce:	ec 01       	movw	r28, r24
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <_ZN6String7replaceERKS_S1_+0x6e>
    16d4:	a5 c0       	rjmp	.+330    	; 0x1820 <_ZN6String7replaceERKS_S1_+0x1b8>
    16d6:	f7 01       	movw	r30, r14
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	44 81       	ldd	r20, Z+4	; 0x04
    16de:	55 81       	ldd	r21, Z+5	; 0x05
    16e0:	6e d3       	rcall	.+1756   	; 0x1dbe <memcpy>
    16e2:	f7 01       	movw	r30, r14
    16e4:	84 81       	ldd	r24, Z+4	; 0x04
    16e6:	95 81       	ldd	r25, Z+5	; 0x05
    16e8:	c8 0f       	add	r28, r24
    16ea:	d9 1f       	adc	r29, r25
    16ec:	eb cf       	rjmp	.-42     	; 0x16c4 <_ZN6String7replaceERKS_S1_+0x5c>
    16ee:	77 fe       	sbrs	r7, 7
    16f0:	40 c0       	rjmp	.+128    	; 0x1772 <_ZN6String7replaceERKS_S1_+0x10a>
    16f2:	5e 01       	movw	r10, r28
    16f4:	f6 01       	movw	r30, r12
    16f6:	60 81       	ld	r22, Z
    16f8:	71 81       	ldd	r23, Z+1	; 0x01
    16fa:	c5 01       	movw	r24, r10
    16fc:	98 d3       	rcall	.+1840   	; 0x1e2e <strstr>
    16fe:	2c 01       	movw	r4, r24
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	11 f1       	breq	.+68     	; 0x1748 <_ZN6String7replaceERKS_S1_+0xe0>
    1704:	4c 01       	movw	r8, r24
    1706:	8a 18       	sub	r8, r10
    1708:	9b 08       	sbc	r9, r11
    170a:	a4 01       	movw	r20, r8
    170c:	b5 01       	movw	r22, r10
    170e:	ce 01       	movw	r24, r28
    1710:	56 d3       	rcall	.+1708   	; 0x1dbe <memcpy>
    1712:	c8 0d       	add	r28, r8
    1714:	d9 1d       	adc	r29, r9
    1716:	f7 01       	movw	r30, r14
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	44 81       	ldd	r20, Z+4	; 0x04
    171e:	55 81       	ldd	r21, Z+5	; 0x05
    1720:	ce 01       	movw	r24, r28
    1722:	4d d3       	rcall	.+1690   	; 0x1dbe <memcpy>
    1724:	f7 01       	movw	r30, r14
    1726:	84 81       	ldd	r24, Z+4	; 0x04
    1728:	95 81       	ldd	r25, Z+5	; 0x05
    172a:	c8 0f       	add	r28, r24
    172c:	d9 1f       	adc	r29, r25
    172e:	f6 01       	movw	r30, r12
    1730:	a4 80       	ldd	r10, Z+4	; 0x04
    1732:	b5 80       	ldd	r11, Z+5	; 0x05
    1734:	a4 0c       	add	r10, r4
    1736:	b5 1c       	adc	r11, r5
    1738:	f8 01       	movw	r30, r16
    173a:	84 81       	ldd	r24, Z+4	; 0x04
    173c:	95 81       	ldd	r25, Z+5	; 0x05
    173e:	86 0d       	add	r24, r6
    1740:	97 1d       	adc	r25, r7
    1742:	95 83       	std	Z+5, r25	; 0x05
    1744:	84 83       	std	Z+4, r24	; 0x04
    1746:	d6 cf       	rjmp	.-84     	; 0x16f4 <_ZN6String7replaceERKS_S1_+0x8c>
    1748:	b5 01       	movw	r22, r10
    174a:	ce 01       	movw	r24, r28
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	bf 90       	pop	r11
    175e:	af 90       	pop	r10
    1760:	9f 90       	pop	r9
    1762:	8f 90       	pop	r8
    1764:	7f 90       	pop	r7
    1766:	6f 90       	pop	r6
    1768:	5f 90       	pop	r5
    176a:	4f 90       	pop	r4
    176c:	3f 90       	pop	r3
    176e:	2f 90       	pop	r2
    1770:	49 c3       	rjmp	.+1682   	; 0x1e04 <strcpy>
    1772:	fb 01       	movw	r30, r22
    1774:	20 80       	ld	r2, Z
    1776:	31 80       	ldd	r3, Z+1	; 0x01
    1778:	52 01       	movw	r10, r4
    177a:	b1 01       	movw	r22, r2
    177c:	ce 01       	movw	r24, r28
    177e:	57 d3       	rcall	.+1710   	; 0x1e2e <strstr>
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	31 f0       	breq	.+12     	; 0x1790 <_ZN6String7replaceERKS_S1_+0x128>
    1784:	ec 01       	movw	r28, r24
    1786:	c8 0d       	add	r28, r8
    1788:	d9 1d       	adc	r29, r9
    178a:	a6 0c       	add	r10, r6
    178c:	b7 1c       	adc	r11, r7
    178e:	f5 cf       	rjmp	.-22     	; 0x177a <_ZN6String7replaceERKS_S1_+0x112>
    1790:	a4 14       	cp	r10, r4
    1792:	b5 04       	cpc	r11, r5
    1794:	09 f4       	brne	.+2      	; 0x1798 <_ZN6String7replaceERKS_S1_+0x130>
    1796:	44 c0       	rjmp	.+136    	; 0x1820 <_ZN6String7replaceERKS_S1_+0x1b8>
    1798:	f8 01       	movw	r30, r16
    179a:	82 81       	ldd	r24, Z+2	; 0x02
    179c:	93 81       	ldd	r25, Z+3	; 0x03
    179e:	8a 15       	cp	r24, r10
    17a0:	9b 05       	cpc	r25, r11
    17a2:	28 f4       	brcc	.+10     	; 0x17ae <_ZN6String7replaceERKS_S1_+0x146>
    17a4:	b5 01       	movw	r22, r10
    17a6:	c8 01       	movw	r24, r16
    17a8:	07 de       	rcall	.-1010   	; 0x13b8 <_ZN6String12changeBufferEj>
    17aa:	88 23       	and	r24, r24
    17ac:	c9 f1       	breq	.+114    	; 0x1820 <_ZN6String7replaceERKS_S1_+0x1b8>
    17ae:	f8 01       	movw	r30, r16
    17b0:	44 81       	ldd	r20, Z+4	; 0x04
    17b2:	55 81       	ldd	r21, Z+5	; 0x05
    17b4:	41 50       	subi	r20, 0x01	; 1
    17b6:	51 09       	sbc	r21, r1
    17b8:	57 fd       	sbrc	r21, 7
    17ba:	32 c0       	rjmp	.+100    	; 0x1820 <_ZN6String7replaceERKS_S1_+0x1b8>
    17bc:	b6 01       	movw	r22, r12
    17be:	c8 01       	movw	r24, r16
    17c0:	06 df       	rcall	.-500    	; 0x15ce <_ZNK6String11lastIndexOfERKS_j>
    17c2:	ec 01       	movw	r28, r24
    17c4:	97 fd       	sbrc	r25, 7
    17c6:	2c c0       	rjmp	.+88     	; 0x1820 <_ZN6String7replaceERKS_S1_+0x1b8>
    17c8:	f6 01       	movw	r30, r12
    17ca:	24 81       	ldd	r18, Z+4	; 0x04
    17cc:	35 81       	ldd	r19, Z+5	; 0x05
    17ce:	28 0f       	add	r18, r24
    17d0:	39 1f       	adc	r19, r25
    17d2:	f8 01       	movw	r30, r16
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	82 0f       	add	r24, r18
    17da:	93 1f       	adc	r25, r19
    17dc:	44 81       	ldd	r20, Z+4	; 0x04
    17de:	55 81       	ldd	r21, Z+5	; 0x05
    17e0:	42 1b       	sub	r20, r18
    17e2:	53 0b       	sbc	r21, r19
    17e4:	bc 01       	movw	r22, r24
    17e6:	86 0d       	add	r24, r6
    17e8:	97 1d       	adc	r25, r7
    17ea:	f2 d2       	rcall	.+1508   	; 0x1dd0 <memmove>
    17ec:	f8 01       	movw	r30, r16
    17ee:	84 81       	ldd	r24, Z+4	; 0x04
    17f0:	95 81       	ldd	r25, Z+5	; 0x05
    17f2:	86 0d       	add	r24, r6
    17f4:	97 1d       	adc	r25, r7
    17f6:	95 83       	std	Z+5, r25	; 0x05
    17f8:	84 83       	std	Z+4, r24	; 0x04
    17fa:	20 81       	ld	r18, Z
    17fc:	31 81       	ldd	r19, Z+1	; 0x01
    17fe:	f9 01       	movw	r30, r18
    1800:	e8 0f       	add	r30, r24
    1802:	f9 1f       	adc	r31, r25
    1804:	10 82       	st	Z, r1
    1806:	f8 01       	movw	r30, r16
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	f7 01       	movw	r30, r14
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	44 81       	ldd	r20, Z+4	; 0x04
    1814:	55 81       	ldd	r21, Z+5	; 0x05
    1816:	8c 0f       	add	r24, r28
    1818:	9d 1f       	adc	r25, r29
    181a:	d1 d2       	rcall	.+1442   	; 0x1dbe <memcpy>
    181c:	ae 01       	movw	r20, r28
    181e:	ca cf       	rjmp	.-108    	; 0x17b4 <_ZN6String7replaceERKS_S1_+0x14c>
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	9f 90       	pop	r9
    1836:	8f 90       	pop	r8
    1838:	7f 90       	pop	r7
    183a:	6f 90       	pop	r6
    183c:	5f 90       	pop	r5
    183e:	4f 90       	pop	r4
    1840:	3f 90       	pop	r3
    1842:	2f 90       	pop	r2
    1844:	08 95       	ret

00001846 <_ZN6String4trimEv>:

void String::trim(void)
{
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
	if (!buffer || len == 0) return;
    185a:	dc 01       	movw	r26, r24
    185c:	cd 90       	ld	r12, X+
    185e:	dc 90       	ld	r13, X
    1860:	11 97       	sbiw	r26, 0x01	; 1
    1862:	c1 14       	cp	r12, r1
    1864:	d1 04       	cpc	r13, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <_ZN6String4trimEv+0x24>
    1868:	3c c0       	rjmp	.+120    	; 0x18e2 <_ZN6String4trimEv+0x9c>
    186a:	14 96       	adiw	r26, 0x04	; 4
    186c:	cd 91       	ld	r28, X+
    186e:	dc 91       	ld	r29, X
    1870:	15 97       	sbiw	r26, 0x05	; 5
    1872:	20 97       	sbiw	r28, 0x00	; 0
    1874:	b1 f1       	breq	.+108    	; 0x18e2 <_ZN6String4trimEv+0x9c>
    1876:	8c 01       	movw	r16, r24
    1878:	76 01       	movw	r14, r12
    187a:	57 01       	movw	r10, r14
    187c:	bf ef       	ldi	r27, 0xFF	; 255
    187e:	ab 1a       	sub	r10, r27
    1880:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    1882:	f7 01       	movw	r30, r14
    1884:	80 81       	ld	r24, Z
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	92 d2       	rcall	.+1316   	; 0x1dae <isspace>
    188a:	89 2b       	or	r24, r25
    188c:	11 f0       	breq	.+4      	; 0x1892 <_ZN6String4trimEv+0x4c>
    188e:	75 01       	movw	r14, r10
    1890:	f4 cf       	rjmp	.-24     	; 0x187a <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    1892:	21 97       	sbiw	r28, 0x01	; 1
    1894:	cc 0d       	add	r28, r12
    1896:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    1898:	88 81       	ld	r24, Y
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	88 d2       	rcall	.+1296   	; 0x1dae <isspace>
    189e:	89 2b       	or	r24, r25
    18a0:	29 f0       	breq	.+10     	; 0x18ac <_ZN6String4trimEv+0x66>
    18a2:	ce 15       	cp	r28, r14
    18a4:	df 05       	cpc	r29, r15
    18a6:	10 f0       	brcs	.+4      	; 0x18ac <_ZN6String4trimEv+0x66>
    18a8:	21 97       	sbiw	r28, 0x01	; 1
    18aa:	f6 cf       	rjmp	.-20     	; 0x1898 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    18ac:	ae 01       	movw	r20, r28
    18ae:	4f 5f       	subi	r20, 0xFF	; 255
    18b0:	5f 4f       	sbci	r21, 0xFF	; 255
    18b2:	4e 19       	sub	r20, r14
    18b4:	5f 09       	sbc	r21, r15
    18b6:	d8 01       	movw	r26, r16
    18b8:	15 96       	adiw	r26, 0x05	; 5
    18ba:	5c 93       	st	X, r21
    18bc:	4e 93       	st	-X, r20
    18be:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    18c0:	ce 14       	cp	r12, r14
    18c2:	df 04       	cpc	r13, r15
    18c4:	18 f4       	brcc	.+6      	; 0x18cc <_ZN6String4trimEv+0x86>
    18c6:	b7 01       	movw	r22, r14
    18c8:	c6 01       	movw	r24, r12
    18ca:	79 d2       	rcall	.+1266   	; 0x1dbe <memcpy>
	buffer[len] = 0;
    18cc:	d8 01       	movw	r26, r16
    18ce:	ed 91       	ld	r30, X+
    18d0:	fc 91       	ld	r31, X
    18d2:	11 97       	sbiw	r26, 0x01	; 1
    18d4:	14 96       	adiw	r26, 0x04	; 4
    18d6:	8d 91       	ld	r24, X+
    18d8:	9c 91       	ld	r25, X
    18da:	15 97       	sbiw	r26, 0x05	; 5
    18dc:	e8 0f       	add	r30, r24
    18de:	f9 1f       	adc	r31, r25
    18e0:	10 82       	st	Z, r1
}
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	08 95       	ret

000018f8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	09 f0       	breq	.+2      	; 0x1904 <_ZNK6String5toIntEv+0xc>
    1902:	2f c2       	rjmp	.+1118   	; 0x1d62 <atol>
	return 0;
}
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	cb 01       	movw	r24, r22
    190a:	08 95       	ret

0000190c <__udivmodsi4>:
    190c:	a1 e2       	ldi	r26, 0x21	; 33
    190e:	1a 2e       	mov	r1, r26
    1910:	aa 1b       	sub	r26, r26
    1912:	bb 1b       	sub	r27, r27
    1914:	fd 01       	movw	r30, r26
    1916:	0d c0       	rjmp	.+26     	; 0x1932 <__udivmodsi4_ep>

00001918 <__udivmodsi4_loop>:
    1918:	aa 1f       	adc	r26, r26
    191a:	bb 1f       	adc	r27, r27
    191c:	ee 1f       	adc	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	a2 17       	cp	r26, r18
    1922:	b3 07       	cpc	r27, r19
    1924:	e4 07       	cpc	r30, r20
    1926:	f5 07       	cpc	r31, r21
    1928:	20 f0       	brcs	.+8      	; 0x1932 <__udivmodsi4_ep>
    192a:	a2 1b       	sub	r26, r18
    192c:	b3 0b       	sbc	r27, r19
    192e:	e4 0b       	sbc	r30, r20
    1930:	f5 0b       	sbc	r31, r21

00001932 <__udivmodsi4_ep>:
    1932:	66 1f       	adc	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	1a 94       	dec	r1
    193c:	69 f7       	brne	.-38     	; 0x1918 <__udivmodsi4_loop>
    193e:	60 95       	com	r22
    1940:	70 95       	com	r23
    1942:	80 95       	com	r24
    1944:	90 95       	com	r25
    1946:	9b 01       	movw	r18, r22
    1948:	ac 01       	movw	r20, r24
    194a:	bd 01       	movw	r22, r26
    194c:	cf 01       	movw	r24, r30
    194e:	08 95       	ret

00001950 <__tablejump2__>:
    1950:	ee 0f       	add	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	88 1f       	adc	r24, r24
    1956:	8b bf       	out	0x3b, r24	; 59
    1958:	07 90       	elpm	r0, Z+
    195a:	f6 91       	elpm	r31, Z
    195c:	e0 2d       	mov	r30, r0
    195e:	19 94       	eijmp

00001960 <malloc>:
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	91 05       	cpc	r25, r1
    196c:	10 f4       	brcc	.+4      	; 0x1972 <malloc+0x12>
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <__flp>
    1976:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <__flp+0x1>
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	a0 e0       	ldi	r26, 0x00	; 0
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	30 97       	sbiw	r30, 0x00	; 0
    1984:	19 f1       	breq	.+70     	; 0x19cc <malloc+0x6c>
    1986:	40 81       	ld	r20, Z
    1988:	51 81       	ldd	r21, Z+1	; 0x01
    198a:	02 81       	ldd	r16, Z+2	; 0x02
    198c:	13 81       	ldd	r17, Z+3	; 0x03
    198e:	48 17       	cp	r20, r24
    1990:	59 07       	cpc	r21, r25
    1992:	c8 f0       	brcs	.+50     	; 0x19c6 <malloc+0x66>
    1994:	84 17       	cp	r24, r20
    1996:	95 07       	cpc	r25, r21
    1998:	69 f4       	brne	.+26     	; 0x19b4 <malloc+0x54>
    199a:	10 97       	sbiw	r26, 0x00	; 0
    199c:	31 f0       	breq	.+12     	; 0x19aa <malloc+0x4a>
    199e:	12 96       	adiw	r26, 0x02	; 2
    19a0:	0c 93       	st	X, r16
    19a2:	12 97       	sbiw	r26, 0x02	; 2
    19a4:	13 96       	adiw	r26, 0x03	; 3
    19a6:	1c 93       	st	X, r17
    19a8:	27 c0       	rjmp	.+78     	; 0x19f8 <malloc+0x98>
    19aa:	00 93 78 03 	sts	0x0378, r16	; 0x800378 <__flp>
    19ae:	10 93 79 03 	sts	0x0379, r17	; 0x800379 <__flp+0x1>
    19b2:	22 c0       	rjmp	.+68     	; 0x19f8 <malloc+0x98>
    19b4:	21 15       	cp	r18, r1
    19b6:	31 05       	cpc	r19, r1
    19b8:	19 f0       	breq	.+6      	; 0x19c0 <malloc+0x60>
    19ba:	42 17       	cp	r20, r18
    19bc:	53 07       	cpc	r21, r19
    19be:	18 f4       	brcc	.+6      	; 0x19c6 <malloc+0x66>
    19c0:	9a 01       	movw	r18, r20
    19c2:	bd 01       	movw	r22, r26
    19c4:	ef 01       	movw	r28, r30
    19c6:	df 01       	movw	r26, r30
    19c8:	f8 01       	movw	r30, r16
    19ca:	db cf       	rjmp	.-74     	; 0x1982 <malloc+0x22>
    19cc:	21 15       	cp	r18, r1
    19ce:	31 05       	cpc	r19, r1
    19d0:	f9 f0       	breq	.+62     	; 0x1a10 <malloc+0xb0>
    19d2:	28 1b       	sub	r18, r24
    19d4:	39 0b       	sbc	r19, r25
    19d6:	24 30       	cpi	r18, 0x04	; 4
    19d8:	31 05       	cpc	r19, r1
    19da:	80 f4       	brcc	.+32     	; 0x19fc <malloc+0x9c>
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	9b 81       	ldd	r25, Y+3	; 0x03
    19e0:	61 15       	cp	r22, r1
    19e2:	71 05       	cpc	r23, r1
    19e4:	21 f0       	breq	.+8      	; 0x19ee <malloc+0x8e>
    19e6:	fb 01       	movw	r30, r22
    19e8:	93 83       	std	Z+3, r25	; 0x03
    19ea:	82 83       	std	Z+2, r24	; 0x02
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <malloc+0x96>
    19ee:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <__flp+0x1>
    19f2:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <__flp>
    19f6:	fe 01       	movw	r30, r28
    19f8:	32 96       	adiw	r30, 0x02	; 2
    19fa:	44 c0       	rjmp	.+136    	; 0x1a84 <malloc+0x124>
    19fc:	fe 01       	movw	r30, r28
    19fe:	e2 0f       	add	r30, r18
    1a00:	f3 1f       	adc	r31, r19
    1a02:	81 93       	st	Z+, r24
    1a04:	91 93       	st	Z+, r25
    1a06:	22 50       	subi	r18, 0x02	; 2
    1a08:	31 09       	sbc	r19, r1
    1a0a:	39 83       	std	Y+1, r19	; 0x01
    1a0c:	28 83       	st	Y, r18
    1a0e:	3a c0       	rjmp	.+116    	; 0x1a84 <malloc+0x124>
    1a10:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <__brkval>
    1a14:	30 91 77 03 	lds	r19, 0x0377	; 0x800377 <__brkval+0x1>
    1a18:	23 2b       	or	r18, r19
    1a1a:	41 f4       	brne	.+16     	; 0x1a2c <malloc+0xcc>
    1a1c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1a20:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1a24:	30 93 77 03 	sts	0x0377, r19	; 0x800377 <__brkval+0x1>
    1a28:	20 93 76 03 	sts	0x0376, r18	; 0x800376 <__brkval>
    1a2c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1a30:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1a34:	21 15       	cp	r18, r1
    1a36:	31 05       	cpc	r19, r1
    1a38:	41 f4       	brne	.+16     	; 0x1a4a <malloc+0xea>
    1a3a:	2d b7       	in	r18, 0x3d	; 61
    1a3c:	3e b7       	in	r19, 0x3e	; 62
    1a3e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1a42:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1a46:	24 1b       	sub	r18, r20
    1a48:	35 0b       	sbc	r19, r21
    1a4a:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <__brkval>
    1a4e:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <__brkval+0x1>
    1a52:	e2 17       	cp	r30, r18
    1a54:	f3 07       	cpc	r31, r19
    1a56:	a0 f4       	brcc	.+40     	; 0x1a80 <malloc+0x120>
    1a58:	2e 1b       	sub	r18, r30
    1a5a:	3f 0b       	sbc	r19, r31
    1a5c:	28 17       	cp	r18, r24
    1a5e:	39 07       	cpc	r19, r25
    1a60:	78 f0       	brcs	.+30     	; 0x1a80 <malloc+0x120>
    1a62:	ac 01       	movw	r20, r24
    1a64:	4e 5f       	subi	r20, 0xFE	; 254
    1a66:	5f 4f       	sbci	r21, 0xFF	; 255
    1a68:	24 17       	cp	r18, r20
    1a6a:	35 07       	cpc	r19, r21
    1a6c:	48 f0       	brcs	.+18     	; 0x1a80 <malloc+0x120>
    1a6e:	4e 0f       	add	r20, r30
    1a70:	5f 1f       	adc	r21, r31
    1a72:	50 93 77 03 	sts	0x0377, r21	; 0x800377 <__brkval+0x1>
    1a76:	40 93 76 03 	sts	0x0376, r20	; 0x800376 <__brkval>
    1a7a:	81 93       	st	Z+, r24
    1a7c:	91 93       	st	Z+, r25
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <malloc+0x124>
    1a80:	e0 e0       	ldi	r30, 0x00	; 0
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	cf 01       	movw	r24, r30
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <free>:
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <free+0xa>
    1a98:	81 c0       	rjmp	.+258    	; 0x1b9c <free+0x10c>
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	32 97       	sbiw	r30, 0x02	; 2
    1a9e:	13 82       	std	Z+3, r1	; 0x03
    1aa0:	12 82       	std	Z+2, r1	; 0x02
    1aa2:	a0 91 78 03 	lds	r26, 0x0378	; 0x800378 <__flp>
    1aa6:	b0 91 79 03 	lds	r27, 0x0379	; 0x800379 <__flp+0x1>
    1aaa:	10 97       	sbiw	r26, 0x00	; 0
    1aac:	81 f4       	brne	.+32     	; 0x1ace <free+0x3e>
    1aae:	20 81       	ld	r18, Z
    1ab0:	31 81       	ldd	r19, Z+1	; 0x01
    1ab2:	82 0f       	add	r24, r18
    1ab4:	93 1f       	adc	r25, r19
    1ab6:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <__brkval>
    1aba:	30 91 77 03 	lds	r19, 0x0377	; 0x800377 <__brkval+0x1>
    1abe:	28 17       	cp	r18, r24
    1ac0:	39 07       	cpc	r19, r25
    1ac2:	51 f5       	brne	.+84     	; 0x1b18 <free+0x88>
    1ac4:	f0 93 77 03 	sts	0x0377, r31	; 0x800377 <__brkval+0x1>
    1ac8:	e0 93 76 03 	sts	0x0376, r30	; 0x800376 <__brkval>
    1acc:	67 c0       	rjmp	.+206    	; 0x1b9c <free+0x10c>
    1ace:	ed 01       	movw	r28, r26
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	ce 17       	cp	r28, r30
    1ad6:	df 07       	cpc	r29, r31
    1ad8:	40 f4       	brcc	.+16     	; 0x1aea <free+0x5a>
    1ada:	4a 81       	ldd	r20, Y+2	; 0x02
    1adc:	5b 81       	ldd	r21, Y+3	; 0x03
    1ade:	9e 01       	movw	r18, r28
    1ae0:	41 15       	cp	r20, r1
    1ae2:	51 05       	cpc	r21, r1
    1ae4:	f1 f0       	breq	.+60     	; 0x1b22 <free+0x92>
    1ae6:	ea 01       	movw	r28, r20
    1ae8:	f5 cf       	rjmp	.-22     	; 0x1ad4 <free+0x44>
    1aea:	d3 83       	std	Z+3, r29	; 0x03
    1aec:	c2 83       	std	Z+2, r28	; 0x02
    1aee:	40 81       	ld	r20, Z
    1af0:	51 81       	ldd	r21, Z+1	; 0x01
    1af2:	84 0f       	add	r24, r20
    1af4:	95 1f       	adc	r25, r21
    1af6:	c8 17       	cp	r28, r24
    1af8:	d9 07       	cpc	r29, r25
    1afa:	59 f4       	brne	.+22     	; 0x1b12 <free+0x82>
    1afc:	88 81       	ld	r24, Y
    1afe:	99 81       	ldd	r25, Y+1	; 0x01
    1b00:	84 0f       	add	r24, r20
    1b02:	95 1f       	adc	r25, r21
    1b04:	02 96       	adiw	r24, 0x02	; 2
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	93 83       	std	Z+3, r25	; 0x03
    1b10:	82 83       	std	Z+2, r24	; 0x02
    1b12:	21 15       	cp	r18, r1
    1b14:	31 05       	cpc	r19, r1
    1b16:	29 f4       	brne	.+10     	; 0x1b22 <free+0x92>
    1b18:	f0 93 79 03 	sts	0x0379, r31	; 0x800379 <__flp+0x1>
    1b1c:	e0 93 78 03 	sts	0x0378, r30	; 0x800378 <__flp>
    1b20:	3d c0       	rjmp	.+122    	; 0x1b9c <free+0x10c>
    1b22:	e9 01       	movw	r28, r18
    1b24:	fb 83       	std	Y+3, r31	; 0x03
    1b26:	ea 83       	std	Y+2, r30	; 0x02
    1b28:	49 91       	ld	r20, Y+
    1b2a:	59 91       	ld	r21, Y+
    1b2c:	c4 0f       	add	r28, r20
    1b2e:	d5 1f       	adc	r29, r21
    1b30:	ec 17       	cp	r30, r28
    1b32:	fd 07       	cpc	r31, r29
    1b34:	61 f4       	brne	.+24     	; 0x1b4e <free+0xbe>
    1b36:	80 81       	ld	r24, Z
    1b38:	91 81       	ldd	r25, Z+1	; 0x01
    1b3a:	84 0f       	add	r24, r20
    1b3c:	95 1f       	adc	r25, r21
    1b3e:	02 96       	adiw	r24, 0x02	; 2
    1b40:	e9 01       	movw	r28, r18
    1b42:	99 83       	std	Y+1, r25	; 0x01
    1b44:	88 83       	st	Y, r24
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	93 81       	ldd	r25, Z+3	; 0x03
    1b4a:	9b 83       	std	Y+3, r25	; 0x03
    1b4c:	8a 83       	std	Y+2, r24	; 0x02
    1b4e:	e0 e0       	ldi	r30, 0x00	; 0
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	12 96       	adiw	r26, 0x02	; 2
    1b54:	8d 91       	ld	r24, X+
    1b56:	9c 91       	ld	r25, X
    1b58:	13 97       	sbiw	r26, 0x03	; 3
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	19 f0       	breq	.+6      	; 0x1b64 <free+0xd4>
    1b5e:	fd 01       	movw	r30, r26
    1b60:	dc 01       	movw	r26, r24
    1b62:	f7 cf       	rjmp	.-18     	; 0x1b52 <free+0xc2>
    1b64:	8d 91       	ld	r24, X+
    1b66:	9c 91       	ld	r25, X
    1b68:	11 97       	sbiw	r26, 0x01	; 1
    1b6a:	9d 01       	movw	r18, r26
    1b6c:	2e 5f       	subi	r18, 0xFE	; 254
    1b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b70:	82 0f       	add	r24, r18
    1b72:	93 1f       	adc	r25, r19
    1b74:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <__brkval>
    1b78:	30 91 77 03 	lds	r19, 0x0377	; 0x800377 <__brkval+0x1>
    1b7c:	28 17       	cp	r18, r24
    1b7e:	39 07       	cpc	r19, r25
    1b80:	69 f4       	brne	.+26     	; 0x1b9c <free+0x10c>
    1b82:	30 97       	sbiw	r30, 0x00	; 0
    1b84:	29 f4       	brne	.+10     	; 0x1b90 <free+0x100>
    1b86:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <__flp+0x1>
    1b8a:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <__flp>
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <free+0x104>
    1b90:	13 82       	std	Z+3, r1	; 0x03
    1b92:	12 82       	std	Z+2, r1	; 0x02
    1b94:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <__brkval+0x1>
    1b98:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <__brkval>
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	08 95       	ret

00001ba2 <realloc>:
    1ba2:	6f 92       	push	r6
    1ba4:	7f 92       	push	r7
    1ba6:	8f 92       	push	r8
    1ba8:	9f 92       	push	r9
    1baa:	af 92       	push	r10
    1bac:	bf 92       	push	r11
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	81 f4       	brne	.+32     	; 0x1be2 <realloc+0x40>
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	df 90       	pop	r13
    1bd2:	cf 90       	pop	r12
    1bd4:	bf 90       	pop	r11
    1bd6:	af 90       	pop	r10
    1bd8:	9f 90       	pop	r9
    1bda:	8f 90       	pop	r8
    1bdc:	7f 90       	pop	r7
    1bde:	6f 90       	pop	r6
    1be0:	bf ce       	rjmp	.-642    	; 0x1960 <malloc>
    1be2:	fc 01       	movw	r30, r24
    1be4:	e6 0f       	add	r30, r22
    1be6:	f7 1f       	adc	r31, r23
    1be8:	9c 01       	movw	r18, r24
    1bea:	22 50       	subi	r18, 0x02	; 2
    1bec:	31 09       	sbc	r19, r1
    1bee:	e2 17       	cp	r30, r18
    1bf0:	f3 07       	cpc	r31, r19
    1bf2:	08 f4       	brcc	.+2      	; 0x1bf6 <realloc+0x54>
    1bf4:	a5 c0       	rjmp	.+330    	; 0x1d40 <realloc+0x19e>
    1bf6:	ec 01       	movw	r28, r24
    1bf8:	d9 01       	movw	r26, r18
    1bfa:	0d 91       	ld	r16, X+
    1bfc:	1c 91       	ld	r17, X
    1bfe:	11 97       	sbiw	r26, 0x01	; 1
    1c00:	06 17       	cp	r16, r22
    1c02:	17 07       	cpc	r17, r23
    1c04:	a8 f0       	brcs	.+42     	; 0x1c30 <realloc+0x8e>
    1c06:	05 30       	cpi	r16, 0x05	; 5
    1c08:	11 05       	cpc	r17, r1
    1c0a:	08 f4       	brcc	.+2      	; 0x1c0e <realloc+0x6c>
    1c0c:	97 c0       	rjmp	.+302    	; 0x1d3c <realloc+0x19a>
    1c0e:	c8 01       	movw	r24, r16
    1c10:	04 97       	sbiw	r24, 0x04	; 4
    1c12:	86 17       	cp	r24, r22
    1c14:	97 07       	cpc	r25, r23
    1c16:	08 f4       	brcc	.+2      	; 0x1c1a <realloc+0x78>
    1c18:	91 c0       	rjmp	.+290    	; 0x1d3c <realloc+0x19a>
    1c1a:	02 50       	subi	r16, 0x02	; 2
    1c1c:	11 09       	sbc	r17, r1
    1c1e:	06 1b       	sub	r16, r22
    1c20:	17 0b       	sbc	r17, r23
    1c22:	01 93       	st	Z+, r16
    1c24:	11 93       	st	Z+, r17
    1c26:	6d 93       	st	X+, r22
    1c28:	7c 93       	st	X, r23
    1c2a:	cf 01       	movw	r24, r30
    1c2c:	31 df       	rcall	.-414    	; 0x1a90 <free>
    1c2e:	86 c0       	rjmp	.+268    	; 0x1d3c <realloc+0x19a>
    1c30:	5b 01       	movw	r10, r22
    1c32:	a0 1a       	sub	r10, r16
    1c34:	b1 0a       	sbc	r11, r17
    1c36:	4c 01       	movw	r8, r24
    1c38:	80 0e       	add	r8, r16
    1c3a:	91 1e       	adc	r9, r17
    1c3c:	a0 91 78 03 	lds	r26, 0x0378	; 0x800378 <__flp>
    1c40:	b0 91 79 03 	lds	r27, 0x0379	; 0x800379 <__flp+0x1>
    1c44:	61 2c       	mov	r6, r1
    1c46:	71 2c       	mov	r7, r1
    1c48:	e1 2c       	mov	r14, r1
    1c4a:	f1 2c       	mov	r15, r1
    1c4c:	10 97       	sbiw	r26, 0x00	; 0
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <realloc+0xb0>
    1c50:	46 c0       	rjmp	.+140    	; 0x1cde <realloc+0x13c>
    1c52:	8d 91       	ld	r24, X+
    1c54:	9c 91       	ld	r25, X
    1c56:	11 97       	sbiw	r26, 0x01	; 1
    1c58:	a8 15       	cp	r26, r8
    1c5a:	b9 05       	cpc	r27, r9
    1c5c:	b1 f5       	brne	.+108    	; 0x1cca <realloc+0x128>
    1c5e:	6c 01       	movw	r12, r24
    1c60:	42 e0       	ldi	r20, 0x02	; 2
    1c62:	c4 0e       	add	r12, r20
    1c64:	d1 1c       	adc	r13, r1
    1c66:	ca 14       	cp	r12, r10
    1c68:	db 04       	cpc	r13, r11
    1c6a:	78 f1       	brcs	.+94     	; 0x1cca <realloc+0x128>
    1c6c:	4c 01       	movw	r8, r24
    1c6e:	8a 18       	sub	r8, r10
    1c70:	9b 08       	sbc	r9, r11
    1c72:	64 01       	movw	r12, r8
    1c74:	42 e0       	ldi	r20, 0x02	; 2
    1c76:	c4 0e       	add	r12, r20
    1c78:	d1 1c       	adc	r13, r1
    1c7a:	12 96       	adiw	r26, 0x02	; 2
    1c7c:	bc 90       	ld	r11, X
    1c7e:	12 97       	sbiw	r26, 0x02	; 2
    1c80:	13 96       	adiw	r26, 0x03	; 3
    1c82:	ac 91       	ld	r26, X
    1c84:	b5 e0       	ldi	r27, 0x05	; 5
    1c86:	cb 16       	cp	r12, r27
    1c88:	d1 04       	cpc	r13, r1
    1c8a:	40 f0       	brcs	.+16     	; 0x1c9c <realloc+0xfa>
    1c8c:	b2 82       	std	Z+2, r11	; 0x02
    1c8e:	a3 83       	std	Z+3, r26	; 0x03
    1c90:	91 82       	std	Z+1, r9	; 0x01
    1c92:	80 82       	st	Z, r8
    1c94:	d9 01       	movw	r26, r18
    1c96:	6d 93       	st	X+, r22
    1c98:	7c 93       	st	X, r23
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <realloc+0x10c>
    1c9c:	0e 5f       	subi	r16, 0xFE	; 254
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	80 0f       	add	r24, r16
    1ca2:	91 1f       	adc	r25, r17
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	80 83       	st	Z, r24
    1caa:	eb 2d       	mov	r30, r11
    1cac:	fa 2f       	mov	r31, r26
    1cae:	e1 14       	cp	r14, r1
    1cb0:	f1 04       	cpc	r15, r1
    1cb2:	31 f0       	breq	.+12     	; 0x1cc0 <realloc+0x11e>
    1cb4:	d7 01       	movw	r26, r14
    1cb6:	13 96       	adiw	r26, 0x03	; 3
    1cb8:	fc 93       	st	X, r31
    1cba:	ee 93       	st	-X, r30
    1cbc:	12 97       	sbiw	r26, 0x02	; 2
    1cbe:	3e c0       	rjmp	.+124    	; 0x1d3c <realloc+0x19a>
    1cc0:	f0 93 79 03 	sts	0x0379, r31	; 0x800379 <__flp+0x1>
    1cc4:	e0 93 78 03 	sts	0x0378, r30	; 0x800378 <__flp>
    1cc8:	39 c0       	rjmp	.+114    	; 0x1d3c <realloc+0x19a>
    1cca:	68 16       	cp	r6, r24
    1ccc:	79 06       	cpc	r7, r25
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <realloc+0x130>
    1cd0:	3c 01       	movw	r6, r24
    1cd2:	7d 01       	movw	r14, r26
    1cd4:	12 96       	adiw	r26, 0x02	; 2
    1cd6:	0d 90       	ld	r0, X+
    1cd8:	bc 91       	ld	r27, X
    1cda:	a0 2d       	mov	r26, r0
    1cdc:	b7 cf       	rjmp	.-146    	; 0x1c4c <realloc+0xaa>
    1cde:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <__brkval>
    1ce2:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <__brkval+0x1>
    1ce6:	88 16       	cp	r8, r24
    1ce8:	99 06       	cpc	r9, r25
    1cea:	e1 f4       	brne	.+56     	; 0x1d24 <realloc+0x182>
    1cec:	66 16       	cp	r6, r22
    1cee:	77 06       	cpc	r7, r23
    1cf0:	c8 f4       	brcc	.+50     	; 0x1d24 <realloc+0x182>
    1cf2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1cf6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	41 f4       	brne	.+16     	; 0x1d0e <realloc+0x16c>
    1cfe:	8d b7       	in	r24, 0x3d	; 61
    1d00:	9e b7       	in	r25, 0x3e	; 62
    1d02:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1d06:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1d0a:	84 1b       	sub	r24, r20
    1d0c:	95 0b       	sbc	r25, r21
    1d0e:	e8 17       	cp	r30, r24
    1d10:	f9 07       	cpc	r31, r25
    1d12:	b0 f4       	brcc	.+44     	; 0x1d40 <realloc+0x19e>
    1d14:	f0 93 77 03 	sts	0x0377, r31	; 0x800377 <__brkval+0x1>
    1d18:	e0 93 76 03 	sts	0x0376, r30	; 0x800376 <__brkval>
    1d1c:	f9 01       	movw	r30, r18
    1d1e:	71 83       	std	Z+1, r23	; 0x01
    1d20:	60 83       	st	Z, r22
    1d22:	0c c0       	rjmp	.+24     	; 0x1d3c <realloc+0x19a>
    1d24:	cb 01       	movw	r24, r22
    1d26:	1c de       	rcall	.-968    	; 0x1960 <malloc>
    1d28:	7c 01       	movw	r14, r24
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	49 f0       	breq	.+18     	; 0x1d40 <realloc+0x19e>
    1d2e:	a8 01       	movw	r20, r16
    1d30:	be 01       	movw	r22, r28
    1d32:	45 d0       	rcall	.+138    	; 0x1dbe <memcpy>
    1d34:	ce 01       	movw	r24, r28
    1d36:	ac de       	rcall	.-680    	; 0x1a90 <free>
    1d38:	c7 01       	movw	r24, r14
    1d3a:	04 c0       	rjmp	.+8      	; 0x1d44 <realloc+0x1a2>
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <realloc+0x1a2>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	df 90       	pop	r13
    1d52:	cf 90       	pop	r12
    1d54:	bf 90       	pop	r11
    1d56:	af 90       	pop	r10
    1d58:	9f 90       	pop	r9
    1d5a:	8f 90       	pop	r8
    1d5c:	7f 90       	pop	r7
    1d5e:	6f 90       	pop	r6
    1d60:	08 95       	ret

00001d62 <atol>:
    1d62:	1f 93       	push	r17
    1d64:	fc 01       	movw	r30, r24
    1d66:	99 27       	eor	r25, r25
    1d68:	88 27       	eor	r24, r24
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	e8 94       	clt
    1d6e:	11 91       	ld	r17, Z+
    1d70:	10 32       	cpi	r17, 0x20	; 32
    1d72:	e9 f3       	breq	.-6      	; 0x1d6e <atol+0xc>
    1d74:	19 30       	cpi	r17, 0x09	; 9
    1d76:	10 f0       	brcs	.+4      	; 0x1d7c <atol+0x1a>
    1d78:	1e 30       	cpi	r17, 0x0E	; 14
    1d7a:	c8 f3       	brcs	.-14     	; 0x1d6e <atol+0xc>
    1d7c:	1b 32       	cpi	r17, 0x2B	; 43
    1d7e:	49 f0       	breq	.+18     	; 0x1d92 <atol+0x30>
    1d80:	1d 32       	cpi	r17, 0x2D	; 45
    1d82:	41 f4       	brne	.+16     	; 0x1d94 <atol+0x32>
    1d84:	68 94       	set
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <atol+0x30>
    1d88:	6c d0       	rcall	.+216    	; 0x1e62 <__mulsi_const_10>
    1d8a:	61 0f       	add	r22, r17
    1d8c:	71 1d       	adc	r23, r1
    1d8e:	81 1d       	adc	r24, r1
    1d90:	91 1d       	adc	r25, r1
    1d92:	11 91       	ld	r17, Z+
    1d94:	10 53       	subi	r17, 0x30	; 48
    1d96:	1a 30       	cpi	r17, 0x0A	; 10
    1d98:	b8 f3       	brcs	.-18     	; 0x1d88 <atol+0x26>
    1d9a:	3e f4       	brtc	.+14     	; 0x1daa <atol+0x48>
    1d9c:	90 95       	com	r25
    1d9e:	80 95       	com	r24
    1da0:	70 95       	com	r23
    1da2:	61 95       	neg	r22
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255
    1da6:	8f 4f       	sbci	r24, 0xFF	; 255
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	1f 91       	pop	r17
    1dac:	08 95       	ret

00001dae <isspace>:
    1dae:	91 11       	cpse	r25, r1
    1db0:	98 c2       	rjmp	.+1328   	; 0x22e2 <__ctype_isfalse>
    1db2:	80 32       	cpi	r24, 0x20	; 32
    1db4:	19 f0       	breq	.+6      	; 0x1dbc <isspace+0xe>
    1db6:	89 50       	subi	r24, 0x09	; 9
    1db8:	85 50       	subi	r24, 0x05	; 5
    1dba:	d0 f7       	brcc	.-12     	; 0x1db0 <isspace+0x2>
    1dbc:	08 95       	ret

00001dbe <memcpy>:
    1dbe:	fb 01       	movw	r30, r22
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <memcpy+0xa>
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	0d 92       	st	X+, r0
    1dc8:	41 50       	subi	r20, 0x01	; 1
    1dca:	50 40       	sbci	r21, 0x00	; 0
    1dcc:	d8 f7       	brcc	.-10     	; 0x1dc4 <memcpy+0x6>
    1dce:	08 95       	ret

00001dd0 <memmove>:
    1dd0:	68 17       	cp	r22, r24
    1dd2:	79 07       	cpc	r23, r25
    1dd4:	68 f4       	brcc	.+26     	; 0x1df0 <memmove+0x20>
    1dd6:	fb 01       	movw	r30, r22
    1dd8:	dc 01       	movw	r26, r24
    1dda:	e4 0f       	add	r30, r20
    1ddc:	f5 1f       	adc	r31, r21
    1dde:	a4 0f       	add	r26, r20
    1de0:	b5 1f       	adc	r27, r21
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <memmove+0x18>
    1de4:	02 90       	ld	r0, -Z
    1de6:	0e 92       	st	-X, r0
    1de8:	41 50       	subi	r20, 0x01	; 1
    1dea:	50 40       	sbci	r21, 0x00	; 0
    1dec:	d8 f7       	brcc	.-10     	; 0x1de4 <memmove+0x14>
    1dee:	08 95       	ret
    1df0:	e6 cf       	rjmp	.-52     	; 0x1dbe <memcpy>

00001df2 <strcmp>:
    1df2:	fb 01       	movw	r30, r22
    1df4:	dc 01       	movw	r26, r24
    1df6:	8d 91       	ld	r24, X+
    1df8:	01 90       	ld	r0, Z+
    1dfa:	80 19       	sub	r24, r0
    1dfc:	01 10       	cpse	r0, r1
    1dfe:	d9 f3       	breq	.-10     	; 0x1df6 <strcmp+0x4>
    1e00:	99 0b       	sbc	r25, r25
    1e02:	08 95       	ret

00001e04 <strcpy>:
    1e04:	fb 01       	movw	r30, r22
    1e06:	dc 01       	movw	r26, r24
    1e08:	01 90       	ld	r0, Z+
    1e0a:	0d 92       	st	X+, r0
    1e0c:	00 20       	and	r0, r0
    1e0e:	e1 f7       	brne	.-8      	; 0x1e08 <strcpy+0x4>
    1e10:	08 95       	ret

00001e12 <strncmp>:
    1e12:	fb 01       	movw	r30, r22
    1e14:	dc 01       	movw	r26, r24
    1e16:	41 50       	subi	r20, 0x01	; 1
    1e18:	50 40       	sbci	r21, 0x00	; 0
    1e1a:	30 f0       	brcs	.+12     	; 0x1e28 <strncmp+0x16>
    1e1c:	8d 91       	ld	r24, X+
    1e1e:	01 90       	ld	r0, Z+
    1e20:	80 19       	sub	r24, r0
    1e22:	19 f4       	brne	.+6      	; 0x1e2a <strncmp+0x18>
    1e24:	00 20       	and	r0, r0
    1e26:	b9 f7       	brne	.-18     	; 0x1e16 <strncmp+0x4>
    1e28:	88 1b       	sub	r24, r24
    1e2a:	99 0b       	sbc	r25, r25
    1e2c:	08 95       	ret

00001e2e <strstr>:
    1e2e:	fb 01       	movw	r30, r22
    1e30:	51 91       	ld	r21, Z+
    1e32:	55 23       	and	r21, r21
    1e34:	a9 f0       	breq	.+42     	; 0x1e60 <strstr+0x32>
    1e36:	bf 01       	movw	r22, r30
    1e38:	dc 01       	movw	r26, r24
    1e3a:	4d 91       	ld	r20, X+
    1e3c:	45 17       	cp	r20, r21
    1e3e:	41 11       	cpse	r20, r1
    1e40:	e1 f7       	brne	.-8      	; 0x1e3a <strstr+0xc>
    1e42:	59 f4       	brne	.+22     	; 0x1e5a <strstr+0x2c>
    1e44:	cd 01       	movw	r24, r26
    1e46:	01 90       	ld	r0, Z+
    1e48:	00 20       	and	r0, r0
    1e4a:	49 f0       	breq	.+18     	; 0x1e5e <strstr+0x30>
    1e4c:	4d 91       	ld	r20, X+
    1e4e:	40 15       	cp	r20, r0
    1e50:	41 11       	cpse	r20, r1
    1e52:	c9 f3       	breq	.-14     	; 0x1e46 <strstr+0x18>
    1e54:	fb 01       	movw	r30, r22
    1e56:	41 11       	cpse	r20, r1
    1e58:	ef cf       	rjmp	.-34     	; 0x1e38 <strstr+0xa>
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	08 95       	ret

00001e62 <__mulsi_const_10>:
    1e62:	59 2f       	mov	r21, r25
    1e64:	48 2f       	mov	r20, r24
    1e66:	37 2f       	mov	r19, r23
    1e68:	26 2f       	mov	r18, r22
    1e6a:	66 0f       	add	r22, r22
    1e6c:	77 1f       	adc	r23, r23
    1e6e:	88 1f       	adc	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	66 0f       	add	r22, r22
    1e74:	77 1f       	adc	r23, r23
    1e76:	88 1f       	adc	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	62 0f       	add	r22, r18
    1e7c:	73 1f       	adc	r23, r19
    1e7e:	84 1f       	adc	r24, r20
    1e80:	95 1f       	adc	r25, r21
    1e82:	66 0f       	add	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	88 1f       	adc	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	08 95       	ret

00001e8c <sprintf>:
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	2e 97       	sbiw	r28, 0x0e	; 14
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	0e 89       	ldd	r16, Y+22	; 0x16
    1ea6:	1f 89       	ldd	r17, Y+23	; 0x17
    1ea8:	86 e0       	ldi	r24, 0x06	; 6
    1eaa:	8c 83       	std	Y+4, r24	; 0x04
    1eac:	1a 83       	std	Y+2, r17	; 0x02
    1eae:	09 83       	std	Y+1, r16	; 0x01
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	9f e7       	ldi	r25, 0x7F	; 127
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	ae 01       	movw	r20, r28
    1eba:	46 5e       	subi	r20, 0xE6	; 230
    1ebc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebe:	68 8d       	ldd	r22, Y+24	; 0x18
    1ec0:	79 8d       	ldd	r23, Y+25	; 0x19
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	10 d0       	rcall	.+32     	; 0x1ee8 <vfprintf>
    1ec8:	ef 81       	ldd	r30, Y+7	; 0x07
    1eca:	f8 85       	ldd	r31, Y+8	; 0x08
    1ecc:	e0 0f       	add	r30, r16
    1ece:	f1 1f       	adc	r31, r17
    1ed0:	10 82       	st	Z, r1
    1ed2:	2e 96       	adiw	r28, 0x0e	; 14
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	08 95       	ret

00001ee8 <vfprintf>:
    1ee8:	2f 92       	push	r2
    1eea:	3f 92       	push	r3
    1eec:	4f 92       	push	r4
    1eee:	5f 92       	push	r5
    1ef0:	6f 92       	push	r6
    1ef2:	7f 92       	push	r7
    1ef4:	8f 92       	push	r8
    1ef6:	9f 92       	push	r9
    1ef8:	af 92       	push	r10
    1efa:	bf 92       	push	r11
    1efc:	cf 92       	push	r12
    1efe:	df 92       	push	r13
    1f00:	ef 92       	push	r14
    1f02:	ff 92       	push	r15
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	2b 97       	sbiw	r28, 0x0b	; 11
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	6c 01       	movw	r12, r24
    1f1e:	7b 01       	movw	r14, r22
    1f20:	8a 01       	movw	r16, r20
    1f22:	fc 01       	movw	r30, r24
    1f24:	17 82       	std	Z+7, r1	; 0x07
    1f26:	16 82       	std	Z+6, r1	; 0x06
    1f28:	83 81       	ldd	r24, Z+3	; 0x03
    1f2a:	81 ff       	sbrs	r24, 1
    1f2c:	bf c1       	rjmp	.+894    	; 0x22ac <__stack+0xad>
    1f2e:	ce 01       	movw	r24, r28
    1f30:	01 96       	adiw	r24, 0x01	; 1
    1f32:	3c 01       	movw	r6, r24
    1f34:	f6 01       	movw	r30, r12
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	f7 01       	movw	r30, r14
    1f3a:	93 fd       	sbrc	r25, 3
    1f3c:	85 91       	lpm	r24, Z+
    1f3e:	93 ff       	sbrs	r25, 3
    1f40:	81 91       	ld	r24, Z+
    1f42:	7f 01       	movw	r14, r30
    1f44:	88 23       	and	r24, r24
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <vfprintf+0x62>
    1f48:	ad c1       	rjmp	.+858    	; 0x22a4 <__stack+0xa5>
    1f4a:	85 32       	cpi	r24, 0x25	; 37
    1f4c:	39 f4       	brne	.+14     	; 0x1f5c <vfprintf+0x74>
    1f4e:	93 fd       	sbrc	r25, 3
    1f50:	85 91       	lpm	r24, Z+
    1f52:	93 ff       	sbrs	r25, 3
    1f54:	81 91       	ld	r24, Z+
    1f56:	7f 01       	movw	r14, r30
    1f58:	85 32       	cpi	r24, 0x25	; 37
    1f5a:	21 f4       	brne	.+8      	; 0x1f64 <vfprintf+0x7c>
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	d9 d1       	rcall	.+946    	; 0x2314 <fputc>
    1f62:	e8 cf       	rjmp	.-48     	; 0x1f34 <vfprintf+0x4c>
    1f64:	91 2c       	mov	r9, r1
    1f66:	21 2c       	mov	r2, r1
    1f68:	31 2c       	mov	r3, r1
    1f6a:	ff e1       	ldi	r31, 0x1F	; 31
    1f6c:	f3 15       	cp	r31, r3
    1f6e:	d8 f0       	brcs	.+54     	; 0x1fa6 <vfprintf+0xbe>
    1f70:	8b 32       	cpi	r24, 0x2B	; 43
    1f72:	79 f0       	breq	.+30     	; 0x1f92 <vfprintf+0xaa>
    1f74:	38 f4       	brcc	.+14     	; 0x1f84 <vfprintf+0x9c>
    1f76:	80 32       	cpi	r24, 0x20	; 32
    1f78:	79 f0       	breq	.+30     	; 0x1f98 <vfprintf+0xb0>
    1f7a:	83 32       	cpi	r24, 0x23	; 35
    1f7c:	a1 f4       	brne	.+40     	; 0x1fa6 <vfprintf+0xbe>
    1f7e:	23 2d       	mov	r18, r3
    1f80:	20 61       	ori	r18, 0x10	; 16
    1f82:	1d c0       	rjmp	.+58     	; 0x1fbe <vfprintf+0xd6>
    1f84:	8d 32       	cpi	r24, 0x2D	; 45
    1f86:	61 f0       	breq	.+24     	; 0x1fa0 <vfprintf+0xb8>
    1f88:	80 33       	cpi	r24, 0x30	; 48
    1f8a:	69 f4       	brne	.+26     	; 0x1fa6 <vfprintf+0xbe>
    1f8c:	23 2d       	mov	r18, r3
    1f8e:	21 60       	ori	r18, 0x01	; 1
    1f90:	16 c0       	rjmp	.+44     	; 0x1fbe <vfprintf+0xd6>
    1f92:	83 2d       	mov	r24, r3
    1f94:	82 60       	ori	r24, 0x02	; 2
    1f96:	38 2e       	mov	r3, r24
    1f98:	e3 2d       	mov	r30, r3
    1f9a:	e4 60       	ori	r30, 0x04	; 4
    1f9c:	3e 2e       	mov	r3, r30
    1f9e:	2a c0       	rjmp	.+84     	; 0x1ff4 <vfprintf+0x10c>
    1fa0:	f3 2d       	mov	r31, r3
    1fa2:	f8 60       	ori	r31, 0x08	; 8
    1fa4:	1d c0       	rjmp	.+58     	; 0x1fe0 <vfprintf+0xf8>
    1fa6:	37 fc       	sbrc	r3, 7
    1fa8:	2d c0       	rjmp	.+90     	; 0x2004 <vfprintf+0x11c>
    1faa:	20 ed       	ldi	r18, 0xD0	; 208
    1fac:	28 0f       	add	r18, r24
    1fae:	2a 30       	cpi	r18, 0x0A	; 10
    1fb0:	40 f0       	brcs	.+16     	; 0x1fc2 <vfprintf+0xda>
    1fb2:	8e 32       	cpi	r24, 0x2E	; 46
    1fb4:	b9 f4       	brne	.+46     	; 0x1fe4 <vfprintf+0xfc>
    1fb6:	36 fc       	sbrc	r3, 6
    1fb8:	75 c1       	rjmp	.+746    	; 0x22a4 <__stack+0xa5>
    1fba:	23 2d       	mov	r18, r3
    1fbc:	20 64       	ori	r18, 0x40	; 64
    1fbe:	32 2e       	mov	r3, r18
    1fc0:	19 c0       	rjmp	.+50     	; 0x1ff4 <vfprintf+0x10c>
    1fc2:	36 fe       	sbrs	r3, 6
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <vfprintf+0xea>
    1fc6:	8a e0       	ldi	r24, 0x0A	; 10
    1fc8:	98 9e       	mul	r9, r24
    1fca:	20 0d       	add	r18, r0
    1fcc:	11 24       	eor	r1, r1
    1fce:	92 2e       	mov	r9, r18
    1fd0:	11 c0       	rjmp	.+34     	; 0x1ff4 <vfprintf+0x10c>
    1fd2:	ea e0       	ldi	r30, 0x0A	; 10
    1fd4:	2e 9e       	mul	r2, r30
    1fd6:	20 0d       	add	r18, r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	22 2e       	mov	r2, r18
    1fdc:	f3 2d       	mov	r31, r3
    1fde:	f0 62       	ori	r31, 0x20	; 32
    1fe0:	3f 2e       	mov	r3, r31
    1fe2:	08 c0       	rjmp	.+16     	; 0x1ff4 <vfprintf+0x10c>
    1fe4:	8c 36       	cpi	r24, 0x6C	; 108
    1fe6:	21 f4       	brne	.+8      	; 0x1ff0 <vfprintf+0x108>
    1fe8:	83 2d       	mov	r24, r3
    1fea:	80 68       	ori	r24, 0x80	; 128
    1fec:	38 2e       	mov	r3, r24
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <vfprintf+0x10c>
    1ff0:	88 36       	cpi	r24, 0x68	; 104
    1ff2:	41 f4       	brne	.+16     	; 0x2004 <vfprintf+0x11c>
    1ff4:	f7 01       	movw	r30, r14
    1ff6:	93 fd       	sbrc	r25, 3
    1ff8:	85 91       	lpm	r24, Z+
    1ffa:	93 ff       	sbrs	r25, 3
    1ffc:	81 91       	ld	r24, Z+
    1ffe:	7f 01       	movw	r14, r30
    2000:	81 11       	cpse	r24, r1
    2002:	b3 cf       	rjmp	.-154    	; 0x1f6a <vfprintf+0x82>
    2004:	98 2f       	mov	r25, r24
    2006:	9f 7d       	andi	r25, 0xDF	; 223
    2008:	95 54       	subi	r25, 0x45	; 69
    200a:	93 30       	cpi	r25, 0x03	; 3
    200c:	28 f4       	brcc	.+10     	; 0x2018 <vfprintf+0x130>
    200e:	0c 5f       	subi	r16, 0xFC	; 252
    2010:	1f 4f       	sbci	r17, 0xFF	; 255
    2012:	9f e3       	ldi	r25, 0x3F	; 63
    2014:	99 83       	std	Y+1, r25	; 0x01
    2016:	0d c0       	rjmp	.+26     	; 0x2032 <vfprintf+0x14a>
    2018:	83 36       	cpi	r24, 0x63	; 99
    201a:	31 f0       	breq	.+12     	; 0x2028 <vfprintf+0x140>
    201c:	83 37       	cpi	r24, 0x73	; 115
    201e:	71 f0       	breq	.+28     	; 0x203c <vfprintf+0x154>
    2020:	83 35       	cpi	r24, 0x53	; 83
    2022:	09 f0       	breq	.+2      	; 0x2026 <vfprintf+0x13e>
    2024:	55 c0       	rjmp	.+170    	; 0x20d0 <vfprintf+0x1e8>
    2026:	20 c0       	rjmp	.+64     	; 0x2068 <vfprintf+0x180>
    2028:	f8 01       	movw	r30, r16
    202a:	80 81       	ld	r24, Z
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	0e 5f       	subi	r16, 0xFE	; 254
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	88 24       	eor	r8, r8
    2034:	83 94       	inc	r8
    2036:	91 2c       	mov	r9, r1
    2038:	53 01       	movw	r10, r6
    203a:	12 c0       	rjmp	.+36     	; 0x2060 <vfprintf+0x178>
    203c:	28 01       	movw	r4, r16
    203e:	f2 e0       	ldi	r31, 0x02	; 2
    2040:	4f 0e       	add	r4, r31
    2042:	51 1c       	adc	r5, r1
    2044:	f8 01       	movw	r30, r16
    2046:	a0 80       	ld	r10, Z
    2048:	b1 80       	ldd	r11, Z+1	; 0x01
    204a:	36 fe       	sbrs	r3, 6
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <vfprintf+0x16c>
    204e:	69 2d       	mov	r22, r9
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <vfprintf+0x170>
    2054:	6f ef       	ldi	r22, 0xFF	; 255
    2056:	7f ef       	ldi	r23, 0xFF	; 255
    2058:	c5 01       	movw	r24, r10
    205a:	51 d1       	rcall	.+674    	; 0x22fe <strnlen>
    205c:	4c 01       	movw	r8, r24
    205e:	82 01       	movw	r16, r4
    2060:	f3 2d       	mov	r31, r3
    2062:	ff 77       	andi	r31, 0x7F	; 127
    2064:	3f 2e       	mov	r3, r31
    2066:	15 c0       	rjmp	.+42     	; 0x2092 <vfprintf+0x1aa>
    2068:	28 01       	movw	r4, r16
    206a:	22 e0       	ldi	r18, 0x02	; 2
    206c:	42 0e       	add	r4, r18
    206e:	51 1c       	adc	r5, r1
    2070:	f8 01       	movw	r30, r16
    2072:	a0 80       	ld	r10, Z
    2074:	b1 80       	ldd	r11, Z+1	; 0x01
    2076:	36 fe       	sbrs	r3, 6
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <vfprintf+0x198>
    207a:	69 2d       	mov	r22, r9
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <vfprintf+0x19c>
    2080:	6f ef       	ldi	r22, 0xFF	; 255
    2082:	7f ef       	ldi	r23, 0xFF	; 255
    2084:	c5 01       	movw	r24, r10
    2086:	30 d1       	rcall	.+608    	; 0x22e8 <strnlen_P>
    2088:	4c 01       	movw	r8, r24
    208a:	f3 2d       	mov	r31, r3
    208c:	f0 68       	ori	r31, 0x80	; 128
    208e:	3f 2e       	mov	r3, r31
    2090:	82 01       	movw	r16, r4
    2092:	33 fc       	sbrc	r3, 3
    2094:	19 c0       	rjmp	.+50     	; 0x20c8 <vfprintf+0x1e0>
    2096:	82 2d       	mov	r24, r2
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	88 16       	cp	r8, r24
    209c:	99 06       	cpc	r9, r25
    209e:	a0 f4       	brcc	.+40     	; 0x20c8 <vfprintf+0x1e0>
    20a0:	b6 01       	movw	r22, r12
    20a2:	80 e2       	ldi	r24, 0x20	; 32
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	36 d1       	rcall	.+620    	; 0x2314 <fputc>
    20a8:	2a 94       	dec	r2
    20aa:	f5 cf       	rjmp	.-22     	; 0x2096 <vfprintf+0x1ae>
    20ac:	f5 01       	movw	r30, r10
    20ae:	37 fc       	sbrc	r3, 7
    20b0:	85 91       	lpm	r24, Z+
    20b2:	37 fe       	sbrs	r3, 7
    20b4:	81 91       	ld	r24, Z+
    20b6:	5f 01       	movw	r10, r30
    20b8:	b6 01       	movw	r22, r12
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	2b d1       	rcall	.+598    	; 0x2314 <fputc>
    20be:	21 10       	cpse	r2, r1
    20c0:	2a 94       	dec	r2
    20c2:	21 e0       	ldi	r18, 0x01	; 1
    20c4:	82 1a       	sub	r8, r18
    20c6:	91 08       	sbc	r9, r1
    20c8:	81 14       	cp	r8, r1
    20ca:	91 04       	cpc	r9, r1
    20cc:	79 f7       	brne	.-34     	; 0x20ac <vfprintf+0x1c4>
    20ce:	e1 c0       	rjmp	.+450    	; 0x2292 <__stack+0x93>
    20d0:	84 36       	cpi	r24, 0x64	; 100
    20d2:	11 f0       	breq	.+4      	; 0x20d8 <vfprintf+0x1f0>
    20d4:	89 36       	cpi	r24, 0x69	; 105
    20d6:	39 f5       	brne	.+78     	; 0x2126 <vfprintf+0x23e>
    20d8:	f8 01       	movw	r30, r16
    20da:	37 fe       	sbrs	r3, 7
    20dc:	07 c0       	rjmp	.+14     	; 0x20ec <vfprintf+0x204>
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	0c 5f       	subi	r16, 0xFC	; 252
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <vfprintf+0x214>
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	07 2e       	mov	r0, r23
    20f2:	00 0c       	add	r0, r0
    20f4:	88 0b       	sbc	r24, r24
    20f6:	99 0b       	sbc	r25, r25
    20f8:	0e 5f       	subi	r16, 0xFE	; 254
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	f3 2d       	mov	r31, r3
    20fe:	ff 76       	andi	r31, 0x6F	; 111
    2100:	3f 2e       	mov	r3, r31
    2102:	97 ff       	sbrs	r25, 7
    2104:	09 c0       	rjmp	.+18     	; 0x2118 <vfprintf+0x230>
    2106:	90 95       	com	r25
    2108:	80 95       	com	r24
    210a:	70 95       	com	r23
    210c:	61 95       	neg	r22
    210e:	7f 4f       	sbci	r23, 0xFF	; 255
    2110:	8f 4f       	sbci	r24, 0xFF	; 255
    2112:	9f 4f       	sbci	r25, 0xFF	; 255
    2114:	f0 68       	ori	r31, 0x80	; 128
    2116:	3f 2e       	mov	r3, r31
    2118:	2a e0       	ldi	r18, 0x0A	; 10
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	a3 01       	movw	r20, r6
    211e:	36 d1       	rcall	.+620    	; 0x238c <__ultoa_invert>
    2120:	88 2e       	mov	r8, r24
    2122:	86 18       	sub	r8, r6
    2124:	44 c0       	rjmp	.+136    	; 0x21ae <vfprintf+0x2c6>
    2126:	85 37       	cpi	r24, 0x75	; 117
    2128:	31 f4       	brne	.+12     	; 0x2136 <vfprintf+0x24e>
    212a:	23 2d       	mov	r18, r3
    212c:	2f 7e       	andi	r18, 0xEF	; 239
    212e:	b2 2e       	mov	r11, r18
    2130:	2a e0       	ldi	r18, 0x0A	; 10
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	25 c0       	rjmp	.+74     	; 0x2180 <vfprintf+0x298>
    2136:	93 2d       	mov	r25, r3
    2138:	99 7f       	andi	r25, 0xF9	; 249
    213a:	b9 2e       	mov	r11, r25
    213c:	8f 36       	cpi	r24, 0x6F	; 111
    213e:	c1 f0       	breq	.+48     	; 0x2170 <vfprintf+0x288>
    2140:	18 f4       	brcc	.+6      	; 0x2148 <vfprintf+0x260>
    2142:	88 35       	cpi	r24, 0x58	; 88
    2144:	79 f0       	breq	.+30     	; 0x2164 <vfprintf+0x27c>
    2146:	ae c0       	rjmp	.+348    	; 0x22a4 <__stack+0xa5>
    2148:	80 37       	cpi	r24, 0x70	; 112
    214a:	19 f0       	breq	.+6      	; 0x2152 <vfprintf+0x26a>
    214c:	88 37       	cpi	r24, 0x78	; 120
    214e:	21 f0       	breq	.+8      	; 0x2158 <vfprintf+0x270>
    2150:	a9 c0       	rjmp	.+338    	; 0x22a4 <__stack+0xa5>
    2152:	e9 2f       	mov	r30, r25
    2154:	e0 61       	ori	r30, 0x10	; 16
    2156:	be 2e       	mov	r11, r30
    2158:	b4 fe       	sbrs	r11, 4
    215a:	0d c0       	rjmp	.+26     	; 0x2176 <vfprintf+0x28e>
    215c:	fb 2d       	mov	r31, r11
    215e:	f4 60       	ori	r31, 0x04	; 4
    2160:	bf 2e       	mov	r11, r31
    2162:	09 c0       	rjmp	.+18     	; 0x2176 <vfprintf+0x28e>
    2164:	34 fe       	sbrs	r3, 4
    2166:	0a c0       	rjmp	.+20     	; 0x217c <vfprintf+0x294>
    2168:	29 2f       	mov	r18, r25
    216a:	26 60       	ori	r18, 0x06	; 6
    216c:	b2 2e       	mov	r11, r18
    216e:	06 c0       	rjmp	.+12     	; 0x217c <vfprintf+0x294>
    2170:	28 e0       	ldi	r18, 0x08	; 8
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <vfprintf+0x298>
    2176:	20 e1       	ldi	r18, 0x10	; 16
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <vfprintf+0x298>
    217c:	20 e1       	ldi	r18, 0x10	; 16
    217e:	32 e0       	ldi	r19, 0x02	; 2
    2180:	f8 01       	movw	r30, r16
    2182:	b7 fe       	sbrs	r11, 7
    2184:	07 c0       	rjmp	.+14     	; 0x2194 <vfprintf+0x2ac>
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	0c 5f       	subi	r16, 0xFC	; 252
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
    2192:	06 c0       	rjmp	.+12     	; 0x21a0 <vfprintf+0x2b8>
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 5f       	subi	r16, 0xFE	; 254
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	a3 01       	movw	r20, r6
    21a2:	f4 d0       	rcall	.+488    	; 0x238c <__ultoa_invert>
    21a4:	88 2e       	mov	r8, r24
    21a6:	86 18       	sub	r8, r6
    21a8:	fb 2d       	mov	r31, r11
    21aa:	ff 77       	andi	r31, 0x7F	; 127
    21ac:	3f 2e       	mov	r3, r31
    21ae:	36 fe       	sbrs	r3, 6
    21b0:	0d c0       	rjmp	.+26     	; 0x21cc <vfprintf+0x2e4>
    21b2:	23 2d       	mov	r18, r3
    21b4:	2e 7f       	andi	r18, 0xFE	; 254
    21b6:	a2 2e       	mov	r10, r18
    21b8:	89 14       	cp	r8, r9
    21ba:	58 f4       	brcc	.+22     	; 0x21d2 <vfprintf+0x2ea>
    21bc:	34 fe       	sbrs	r3, 4
    21be:	0b c0       	rjmp	.+22     	; 0x21d6 <vfprintf+0x2ee>
    21c0:	32 fc       	sbrc	r3, 2
    21c2:	09 c0       	rjmp	.+18     	; 0x21d6 <vfprintf+0x2ee>
    21c4:	83 2d       	mov	r24, r3
    21c6:	8e 7e       	andi	r24, 0xEE	; 238
    21c8:	a8 2e       	mov	r10, r24
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <vfprintf+0x2ee>
    21cc:	b8 2c       	mov	r11, r8
    21ce:	a3 2c       	mov	r10, r3
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <vfprintf+0x2f0>
    21d2:	b8 2c       	mov	r11, r8
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <vfprintf+0x2f0>
    21d6:	b9 2c       	mov	r11, r9
    21d8:	a4 fe       	sbrs	r10, 4
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <vfprintf+0x312>
    21dc:	fe 01       	movw	r30, r28
    21de:	e8 0d       	add	r30, r8
    21e0:	f1 1d       	adc	r31, r1
    21e2:	80 81       	ld	r24, Z
    21e4:	80 33       	cpi	r24, 0x30	; 48
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <vfprintf+0x308>
    21e8:	9a 2d       	mov	r25, r10
    21ea:	99 7e       	andi	r25, 0xE9	; 233
    21ec:	a9 2e       	mov	r10, r25
    21ee:	09 c0       	rjmp	.+18     	; 0x2202 <__stack+0x3>
    21f0:	a2 fe       	sbrs	r10, 2
    21f2:	06 c0       	rjmp	.+12     	; 0x2200 <__stack+0x1>
    21f4:	b3 94       	inc	r11
    21f6:	b3 94       	inc	r11
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <__stack+0x3>
    21fa:	8a 2d       	mov	r24, r10
    21fc:	86 78       	andi	r24, 0x86	; 134
    21fe:	09 f0       	breq	.+2      	; 0x2202 <__stack+0x3>
    2200:	b3 94       	inc	r11
    2202:	a3 fc       	sbrc	r10, 3
    2204:	10 c0       	rjmp	.+32     	; 0x2226 <__stack+0x27>
    2206:	a0 fe       	sbrs	r10, 0
    2208:	06 c0       	rjmp	.+12     	; 0x2216 <__stack+0x17>
    220a:	b2 14       	cp	r11, r2
    220c:	80 f4       	brcc	.+32     	; 0x222e <__stack+0x2f>
    220e:	28 0c       	add	r2, r8
    2210:	92 2c       	mov	r9, r2
    2212:	9b 18       	sub	r9, r11
    2214:	0d c0       	rjmp	.+26     	; 0x2230 <__stack+0x31>
    2216:	b2 14       	cp	r11, r2
    2218:	58 f4       	brcc	.+22     	; 0x2230 <__stack+0x31>
    221a:	b6 01       	movw	r22, r12
    221c:	80 e2       	ldi	r24, 0x20	; 32
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	79 d0       	rcall	.+242    	; 0x2314 <fputc>
    2222:	b3 94       	inc	r11
    2224:	f8 cf       	rjmp	.-16     	; 0x2216 <__stack+0x17>
    2226:	b2 14       	cp	r11, r2
    2228:	18 f4       	brcc	.+6      	; 0x2230 <__stack+0x31>
    222a:	2b 18       	sub	r2, r11
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <__stack+0x33>
    222e:	98 2c       	mov	r9, r8
    2230:	21 2c       	mov	r2, r1
    2232:	a4 fe       	sbrs	r10, 4
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <__stack+0x55>
    2236:	b6 01       	movw	r22, r12
    2238:	80 e3       	ldi	r24, 0x30	; 48
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	6b d0       	rcall	.+214    	; 0x2314 <fputc>
    223e:	a2 fe       	sbrs	r10, 2
    2240:	16 c0       	rjmp	.+44     	; 0x226e <__stack+0x6f>
    2242:	a1 fc       	sbrc	r10, 1
    2244:	03 c0       	rjmp	.+6      	; 0x224c <__stack+0x4d>
    2246:	88 e7       	ldi	r24, 0x78	; 120
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <__stack+0x51>
    224c:	88 e5       	ldi	r24, 0x58	; 88
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	b6 01       	movw	r22, r12
    2252:	0c c0       	rjmp	.+24     	; 0x226c <__stack+0x6d>
    2254:	8a 2d       	mov	r24, r10
    2256:	86 78       	andi	r24, 0x86	; 134
    2258:	51 f0       	breq	.+20     	; 0x226e <__stack+0x6f>
    225a:	a1 fe       	sbrs	r10, 1
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <__stack+0x63>
    225e:	8b e2       	ldi	r24, 0x2B	; 43
    2260:	01 c0       	rjmp	.+2      	; 0x2264 <__stack+0x65>
    2262:	80 e2       	ldi	r24, 0x20	; 32
    2264:	a7 fc       	sbrc	r10, 7
    2266:	8d e2       	ldi	r24, 0x2D	; 45
    2268:	b6 01       	movw	r22, r12
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	53 d0       	rcall	.+166    	; 0x2314 <fputc>
    226e:	89 14       	cp	r8, r9
    2270:	30 f4       	brcc	.+12     	; 0x227e <__stack+0x7f>
    2272:	b6 01       	movw	r22, r12
    2274:	80 e3       	ldi	r24, 0x30	; 48
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	4d d0       	rcall	.+154    	; 0x2314 <fputc>
    227a:	9a 94       	dec	r9
    227c:	f8 cf       	rjmp	.-16     	; 0x226e <__stack+0x6f>
    227e:	8a 94       	dec	r8
    2280:	f3 01       	movw	r30, r6
    2282:	e8 0d       	add	r30, r8
    2284:	f1 1d       	adc	r31, r1
    2286:	80 81       	ld	r24, Z
    2288:	b6 01       	movw	r22, r12
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	43 d0       	rcall	.+134    	; 0x2314 <fputc>
    228e:	81 10       	cpse	r8, r1
    2290:	f6 cf       	rjmp	.-20     	; 0x227e <__stack+0x7f>
    2292:	22 20       	and	r2, r2
    2294:	09 f4       	brne	.+2      	; 0x2298 <__stack+0x99>
    2296:	4e ce       	rjmp	.-868    	; 0x1f34 <vfprintf+0x4c>
    2298:	b6 01       	movw	r22, r12
    229a:	80 e2       	ldi	r24, 0x20	; 32
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	3a d0       	rcall	.+116    	; 0x2314 <fputc>
    22a0:	2a 94       	dec	r2
    22a2:	f7 cf       	rjmp	.-18     	; 0x2292 <__stack+0x93>
    22a4:	f6 01       	movw	r30, r12
    22a6:	86 81       	ldd	r24, Z+6	; 0x06
    22a8:	97 81       	ldd	r25, Z+7	; 0x07
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <__stack+0xb1>
    22ac:	8f ef       	ldi	r24, 0xFF	; 255
    22ae:	9f ef       	ldi	r25, 0xFF	; 255
    22b0:	2b 96       	adiw	r28, 0x0b	; 11
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	ff 90       	pop	r15
    22c6:	ef 90       	pop	r14
    22c8:	df 90       	pop	r13
    22ca:	cf 90       	pop	r12
    22cc:	bf 90       	pop	r11
    22ce:	af 90       	pop	r10
    22d0:	9f 90       	pop	r9
    22d2:	8f 90       	pop	r8
    22d4:	7f 90       	pop	r7
    22d6:	6f 90       	pop	r6
    22d8:	5f 90       	pop	r5
    22da:	4f 90       	pop	r4
    22dc:	3f 90       	pop	r3
    22de:	2f 90       	pop	r2
    22e0:	08 95       	ret

000022e2 <__ctype_isfalse>:
    22e2:	99 27       	eor	r25, r25
    22e4:	88 27       	eor	r24, r24

000022e6 <__ctype_istrue>:
    22e6:	08 95       	ret

000022e8 <strnlen_P>:
    22e8:	fc 01       	movw	r30, r24
    22ea:	05 90       	lpm	r0, Z+
    22ec:	61 50       	subi	r22, 0x01	; 1
    22ee:	70 40       	sbci	r23, 0x00	; 0
    22f0:	01 10       	cpse	r0, r1
    22f2:	d8 f7       	brcc	.-10     	; 0x22ea <strnlen_P+0x2>
    22f4:	80 95       	com	r24
    22f6:	90 95       	com	r25
    22f8:	8e 0f       	add	r24, r30
    22fa:	9f 1f       	adc	r25, r31
    22fc:	08 95       	ret

000022fe <strnlen>:
    22fe:	fc 01       	movw	r30, r24
    2300:	61 50       	subi	r22, 0x01	; 1
    2302:	70 40       	sbci	r23, 0x00	; 0
    2304:	01 90       	ld	r0, Z+
    2306:	01 10       	cpse	r0, r1
    2308:	d8 f7       	brcc	.-10     	; 0x2300 <strnlen+0x2>
    230a:	80 95       	com	r24
    230c:	90 95       	com	r25
    230e:	8e 0f       	add	r24, r30
    2310:	9f 1f       	adc	r25, r31
    2312:	08 95       	ret

00002314 <fputc>:
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	fb 01       	movw	r30, r22
    231e:	23 81       	ldd	r18, Z+3	; 0x03
    2320:	21 fd       	sbrc	r18, 1
    2322:	03 c0       	rjmp	.+6      	; 0x232a <fputc+0x16>
    2324:	8f ef       	ldi	r24, 0xFF	; 255
    2326:	9f ef       	ldi	r25, 0xFF	; 255
    2328:	2c c0       	rjmp	.+88     	; 0x2382 <fputc+0x6e>
    232a:	22 ff       	sbrs	r18, 2
    232c:	16 c0       	rjmp	.+44     	; 0x235a <fputc+0x46>
    232e:	46 81       	ldd	r20, Z+6	; 0x06
    2330:	57 81       	ldd	r21, Z+7	; 0x07
    2332:	24 81       	ldd	r18, Z+4	; 0x04
    2334:	35 81       	ldd	r19, Z+5	; 0x05
    2336:	42 17       	cp	r20, r18
    2338:	53 07       	cpc	r21, r19
    233a:	44 f4       	brge	.+16     	; 0x234c <fputc+0x38>
    233c:	a0 81       	ld	r26, Z
    233e:	b1 81       	ldd	r27, Z+1	; 0x01
    2340:	9d 01       	movw	r18, r26
    2342:	2f 5f       	subi	r18, 0xFF	; 255
    2344:	3f 4f       	sbci	r19, 0xFF	; 255
    2346:	31 83       	std	Z+1, r19	; 0x01
    2348:	20 83       	st	Z, r18
    234a:	8c 93       	st	X, r24
    234c:	26 81       	ldd	r18, Z+6	; 0x06
    234e:	37 81       	ldd	r19, Z+7	; 0x07
    2350:	2f 5f       	subi	r18, 0xFF	; 255
    2352:	3f 4f       	sbci	r19, 0xFF	; 255
    2354:	37 83       	std	Z+7, r19	; 0x07
    2356:	26 83       	std	Z+6, r18	; 0x06
    2358:	14 c0       	rjmp	.+40     	; 0x2382 <fputc+0x6e>
    235a:	8b 01       	movw	r16, r22
    235c:	ec 01       	movw	r28, r24
    235e:	fb 01       	movw	r30, r22
    2360:	00 84       	ldd	r0, Z+8	; 0x08
    2362:	f1 85       	ldd	r31, Z+9	; 0x09
    2364:	e0 2d       	mov	r30, r0
    2366:	19 95       	eicall
    2368:	89 2b       	or	r24, r25
    236a:	e1 f6       	brne	.-72     	; 0x2324 <fputc+0x10>
    236c:	d8 01       	movw	r26, r16
    236e:	16 96       	adiw	r26, 0x06	; 6
    2370:	8d 91       	ld	r24, X+
    2372:	9c 91       	ld	r25, X
    2374:	17 97       	sbiw	r26, 0x07	; 7
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	17 96       	adiw	r26, 0x07	; 7
    237a:	9c 93       	st	X, r25
    237c:	8e 93       	st	-X, r24
    237e:	16 97       	sbiw	r26, 0x06	; 6
    2380:	ce 01       	movw	r24, r28
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	08 95       	ret

0000238c <__ultoa_invert>:
    238c:	fa 01       	movw	r30, r20
    238e:	aa 27       	eor	r26, r26
    2390:	28 30       	cpi	r18, 0x08	; 8
    2392:	51 f1       	breq	.+84     	; 0x23e8 <__ultoa_invert+0x5c>
    2394:	20 31       	cpi	r18, 0x10	; 16
    2396:	81 f1       	breq	.+96     	; 0x23f8 <__ultoa_invert+0x6c>
    2398:	e8 94       	clt
    239a:	6f 93       	push	r22
    239c:	6e 7f       	andi	r22, 0xFE	; 254
    239e:	6e 5f       	subi	r22, 0xFE	; 254
    23a0:	7f 4f       	sbci	r23, 0xFF	; 255
    23a2:	8f 4f       	sbci	r24, 0xFF	; 255
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	af 4f       	sbci	r26, 0xFF	; 255
    23a8:	b1 e0       	ldi	r27, 0x01	; 1
    23aa:	3e d0       	rcall	.+124    	; 0x2428 <__ultoa_invert+0x9c>
    23ac:	b4 e0       	ldi	r27, 0x04	; 4
    23ae:	3c d0       	rcall	.+120    	; 0x2428 <__ultoa_invert+0x9c>
    23b0:	67 0f       	add	r22, r23
    23b2:	78 1f       	adc	r23, r24
    23b4:	89 1f       	adc	r24, r25
    23b6:	9a 1f       	adc	r25, r26
    23b8:	a1 1d       	adc	r26, r1
    23ba:	68 0f       	add	r22, r24
    23bc:	79 1f       	adc	r23, r25
    23be:	8a 1f       	adc	r24, r26
    23c0:	91 1d       	adc	r25, r1
    23c2:	a1 1d       	adc	r26, r1
    23c4:	6a 0f       	add	r22, r26
    23c6:	71 1d       	adc	r23, r1
    23c8:	81 1d       	adc	r24, r1
    23ca:	91 1d       	adc	r25, r1
    23cc:	a1 1d       	adc	r26, r1
    23ce:	20 d0       	rcall	.+64     	; 0x2410 <__ultoa_invert+0x84>
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <__ultoa_invert+0x48>
    23d2:	68 94       	set
    23d4:	3f 91       	pop	r19
    23d6:	2a e0       	ldi	r18, 0x0A	; 10
    23d8:	26 9f       	mul	r18, r22
    23da:	11 24       	eor	r1, r1
    23dc:	30 19       	sub	r19, r0
    23de:	30 5d       	subi	r19, 0xD0	; 208
    23e0:	31 93       	st	Z+, r19
    23e2:	de f6       	brtc	.-74     	; 0x239a <__ultoa_invert+0xe>
    23e4:	cf 01       	movw	r24, r30
    23e6:	08 95       	ret
    23e8:	46 2f       	mov	r20, r22
    23ea:	47 70       	andi	r20, 0x07	; 7
    23ec:	40 5d       	subi	r20, 0xD0	; 208
    23ee:	41 93       	st	Z+, r20
    23f0:	b3 e0       	ldi	r27, 0x03	; 3
    23f2:	0f d0       	rcall	.+30     	; 0x2412 <__ultoa_invert+0x86>
    23f4:	c9 f7       	brne	.-14     	; 0x23e8 <__ultoa_invert+0x5c>
    23f6:	f6 cf       	rjmp	.-20     	; 0x23e4 <__ultoa_invert+0x58>
    23f8:	46 2f       	mov	r20, r22
    23fa:	4f 70       	andi	r20, 0x0F	; 15
    23fc:	40 5d       	subi	r20, 0xD0	; 208
    23fe:	4a 33       	cpi	r20, 0x3A	; 58
    2400:	18 f0       	brcs	.+6      	; 0x2408 <__ultoa_invert+0x7c>
    2402:	49 5d       	subi	r20, 0xD9	; 217
    2404:	31 fd       	sbrc	r19, 1
    2406:	40 52       	subi	r20, 0x20	; 32
    2408:	41 93       	st	Z+, r20
    240a:	02 d0       	rcall	.+4      	; 0x2410 <__ultoa_invert+0x84>
    240c:	a9 f7       	brne	.-22     	; 0x23f8 <__ultoa_invert+0x6c>
    240e:	ea cf       	rjmp	.-44     	; 0x23e4 <__ultoa_invert+0x58>
    2410:	b4 e0       	ldi	r27, 0x04	; 4
    2412:	a6 95       	lsr	r26
    2414:	97 95       	ror	r25
    2416:	87 95       	ror	r24
    2418:	77 95       	ror	r23
    241a:	67 95       	ror	r22
    241c:	ba 95       	dec	r27
    241e:	c9 f7       	brne	.-14     	; 0x2412 <__ultoa_invert+0x86>
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	61 05       	cpc	r22, r1
    2424:	71 05       	cpc	r23, r1
    2426:	08 95       	ret
    2428:	9b 01       	movw	r18, r22
    242a:	ac 01       	movw	r20, r24
    242c:	0a 2e       	mov	r0, r26
    242e:	06 94       	lsr	r0
    2430:	57 95       	ror	r21
    2432:	47 95       	ror	r20
    2434:	37 95       	ror	r19
    2436:	27 95       	ror	r18
    2438:	ba 95       	dec	r27
    243a:	c9 f7       	brne	.-14     	; 0x242e <__ultoa_invert+0xa2>
    243c:	62 0f       	add	r22, r18
    243e:	73 1f       	adc	r23, r19
    2440:	84 1f       	adc	r24, r20
    2442:	95 1f       	adc	r25, r21
    2444:	a0 1d       	adc	r26, r0
    2446:	08 95       	ret

00002448 <__do_global_dtors>:
    2448:	11 e0       	ldi	r17, 0x01	; 1
    244a:	cb e1       	ldi	r28, 0x1B	; 27
    244c:	d1 e0       	ldi	r29, 0x01	; 1
    244e:	00 e0       	ldi	r16, 0x00	; 0
    2450:	05 c0       	rjmp	.+10     	; 0x245c <__do_global_dtors+0x14>
    2452:	80 2f       	mov	r24, r16
    2454:	fe 01       	movw	r30, r28
    2456:	7c da       	rcall	.-2824   	; 0x1950 <__tablejump2__>
    2458:	21 96       	adiw	r28, 0x01	; 1
    245a:	01 1d       	adc	r16, r1
    245c:	cc 31       	cpi	r28, 0x1C	; 28
    245e:	d1 07       	cpc	r29, r17
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	08 07       	cpc	r16, r24
    2464:	b1 f7       	brne	.-20     	; 0x2452 <__do_global_dtors+0xa>
    2466:	f8 94       	cli

00002468 <__stop_program>:
    2468:	ff cf       	rjmp	.-2      	; 0x2468 <__stop_program>
